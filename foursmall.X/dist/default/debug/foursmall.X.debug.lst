

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Dec 17 01:14:16 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.44
    19                           ; Generated 14/09/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4520 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	nvCOMRAM
    54  00002C                     __pnvCOMRAM:
    55                           	opt stack 0
    56  00002C                     _lednum_24:
    57                           	opt stack 0
    58  00002C                     	ds	4
    59  000030                     _ledlength:
    60                           	opt stack 0
    61  000030                     	ds	4
    62  000034                     _ledmax:
    63                           	opt stack 0
    64  000034                     	ds	2
    65  000036                     _lednum:
    66                           	opt stack 0
    67  000036                     	ds	2
    68  000038                     _tmp3:
    69                           	opt stack 0
    70  000038                     	ds	1
    71  000039                     _tmp2:
    72                           	opt stack 0
    73  000039                     	ds	1
    74  00003A                     _tmp1:
    75                           	opt stack 0
    76  00003A                     	ds	1
    77  0000                     _TRISDbits	set	3989
    78  0000                     _OSCTUNEbits	set	3995
    79  0000                     _PORTDbits	set	3971
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _GIE	set	32663
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  007866                     __pcinit:
    87                           	opt stack 0
    88  007866                     start_initialization:
    89                           	opt stack 0
    90  007866                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (13 bytes)
    94  007866  EE00  F03B         	lfsr	0,__pbssCOMRAM
    95  00786A  0E0D               	movlw	13
    96  00786C                     clear_0:
    97  00786C  6AEE               	clrf	postinc0,c
    98  00786E  06E8               	decf	wreg,f,c
    99  007870  E1FD               	bnz	clear_0
   100  007872                     end_of_initialization:
   101                           	opt stack 0
   102  007872                     __end_of__initialization:
   103                           	opt stack 0
   104  007872  0100               	movlb	0
   105  007874  EF9C  F03D         	goto	_main	;jump to C main() function
   106                           postinc0	equ	0xFEE
   107                           wreg	equ	0xFE8
   108                           
   109                           	psect	bssCOMRAM
   110  00003B                     __pbssCOMRAM:
   111                           	opt stack 0
   112  00003B                     _temp:
   113                           	opt stack 0
   114  00003B                     	ds	4
   115  00003F                     _led:
   116                           	opt stack 0
   117  00003F                     	ds	3
   118  000042                     _effect:
   119                           	opt stack 0
   120  000042                     	ds	2
   121  000044                     _isFlow:
   122                           	opt stack 0
   123  000044                     	ds	2
   124  000046                     _flag:
   125                           	opt stack 0
   126  000046                     	ds	2
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           
   130                           	psect	cstackCOMRAM
   131  000001                     __pcstackCOMRAM:
   132                           	opt stack 0
   133  000001                     ?___wmul:
   134                           	opt stack 0
   135  000001                     ?_bitflip:
   136                           	opt stack 0
   137  000001                     ?___lmul:
   138                           	opt stack 0
   139  000001                     ___wmul@multiplier:
   140                           	opt stack 0
   141  000001                     ___lmul@multiplier:
   142                           	opt stack 0
   143                           
   144                           ; 4 bytes @ 0x0
   145  000001                     	ds	2
   146  000003                     ___wmul@multiplicand:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x2
   150  000003                     	ds	2
   151  000005                     ??_bitflip:
   152  000005                     ___wmul@product:
   153                           	opt stack 0
   154  000005                     ___lmul@multiplicand:
   155                           	opt stack 0
   156                           
   157                           ; 4 bytes @ 0x4
   158  000005                     	ds	2
   159  000007                     bitflip@b:
   160                           	opt stack 0
   161                           
   162                           ; 1 bytes @ 0x6
   163  000007                     	ds	2
   164  000009                     ___lmul@product:
   165                           	opt stack 0
   166                           
   167                           ; 4 bytes @ 0x8
   168  000009                     	ds	4
   169  00000D                     led_send@front:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0xC
   173  00000D                     	ds	2
   174  00000F                     ??_led_send:
   175                           
   176                           ; 1 bytes @ 0xE
   177  00000F                     	ds	5
   178  000014                     led_send@front_24:
   179                           	opt stack 0
   180                           
   181                           ; 4 bytes @ 0x13
   182  000014                     	ds	4
   183  000018                     led_send@back_24:
   184                           	opt stack 0
   185                           
   186                           ; 4 bytes @ 0x17
   187  000018                     	ds	4
   188  00001C                     led_send@i:
   189                           	opt stack 0
   190                           
   191                           ; 4 bytes @ 0x1B
   192  00001C                     	ds	4
   193  000020                     led_send@val:
   194                           	opt stack 0
   195                           
   196                           ; 4 bytes @ 0x1F
   197  000020                     	ds	4
   198  000024                     led_send@buf:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x23
   202  000024                     	ds	2
   203  000026                     main@k:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x25
   207  000026                     	ds	2
   208  000028                     main@l:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x27
   212  000028                     	ds	2
   213  00002A                     main@front:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x29
   217  00002A                     	ds	2
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           
   221 ;;
   222 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   223 ;;
   224 ;; *************** function _main *****************
   225 ;; Defined at:
   226 ;;		line 134 in file "hehe.c"
   227 ;; Parameters:    Size  Location     Type
   228 ;;		None
   229 ;; Auto vars:     Size  Location     Type
   230 ;;  l               2   39[COMRAM] int 
   231 ;;  k               2   37[COMRAM] int 
   232 ;;  front           2   41[COMRAM] int 
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   242 ;;      Params:         0       0       0       0       0       0       0
   243 ;;      Locals:         6       0       0       0       0       0       0
   244 ;;      Temps:          0       0       0       0       0       0       0
   245 ;;      Totals:         6       0       0       0       0       0       0
   246 ;;Total ram usage:        6 bytes
   247 ;; Hardware stack levels required when called:    2
   248 ;; This function calls:
   249 ;;		_bitflip
   250 ;;		_init
   251 ;;		_led_send
   252 ;; This function is called by:
   253 ;;		Startup code after reset
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           	psect	text0
   258  007B38                     __ptext0:
   259                           	opt stack 0
   260  007B38                     _main:
   261                           	opt stack 29
   262                           
   263                           ;hehe.c: 135: init();
   264                           
   265                           ;incstack = 0
   266  007B38  ECA7  F03C         	call	_init	;wreg free
   267                           
   268                           ;hehe.c: 136: tmp1=bitflip(led.g);
   269  007B3C  5041               	movf	_led+2,w,c
   270  007B3E  EC7A  F03C         	call	_bitflip
   271  007B42  5001               	movf	?_bitflip,w,c
   272  007B44  6E3A               	movwf	_tmp1,c
   273                           
   274                           ;hehe.c: 137: tmp2=bitflip(led.r);
   275  007B46  503F               	movf	_led,w,c
   276  007B48  EC7A  F03C         	call	_bitflip
   277  007B4C  5001               	movf	?_bitflip,w,c
   278  007B4E  6E39               	movwf	_tmp2,c
   279                           
   280                           ;hehe.c: 138: tmp3=bitflip(led.b);
   281  007B50  5040               	movf	_led+1,w,c
   282  007B52  EC7A  F03C         	call	_bitflip
   283  007B56  5001               	movf	?_bitflip,w,c
   284  007B58  6E38               	movwf	_tmp3,c
   285                           
   286                           ;hehe.c: 140: int front = 0;
   287  007B5A  0E00               	movlw	0
   288  007B5C  6E2B               	movwf	main@front+1,c
   289  007B5E  0E00               	movlw	0
   290  007B60  6E2A               	movwf	main@front,c
   291  007B62                     l62:
   292  007B62  0004               	clrwdt		;# 
   293                           
   294                           ;hehe.c: 144: GIE = 0; while (GIE);
   295  007B64  9EF2               	bcf	intcon,7,c	;volatile
   296  007B66  BEF2               	btfsc	intcon,7,c	;volatile
   297  007B68  D7FE               	goto	l64
   298                           
   299                           ;hehe.c: 145: if(effect == 0)
   300  007B6A  5042               	movf	_effect,w,c
   301  007B6C  1043               	iorwf	_effect+1,w,c
   302  007B6E  B4D8               	btfsc	status,2,c
   303  007B70  D009               	goto	l67
   304  007B72  D00E               	goto	l66
   305  007B74                     
   306                           ;hehe.c: 148: led.r += 5;
   307  007B74  0E05               	movlw	5
   308  007B76  263F               	addwf	_led,f,c
   309                           
   310                           ;hehe.c: 149: led_send(front);
   311  007B78  C02A  F00D         	movff	main@front,led_send@front
   312  007B7C  C02B  F00E         	movff	main@front+1,led_send@front+1
   313  007B80  ECDE  F03C         	call	_led_send	;wreg free
   314  007B84                     l67:
   315  007B84  0E81               	movlw	129
   316  007B86  643F               	cpfsgt	_led,c
   317  007B88  D7F5               	goto	l68
   318  007B8A                     u370:
   319                           
   320                           ;hehe.c: 150: }
   321                           ;hehe.c: 151: effect++;
   322  007B8A  4A42               	infsnz	_effect,f,c
   323  007B8C  2A43               	incf	_effect+1,f,c
   324  007B8E  D04D               	goto	l1106
   325  007B90                     l66:
   326                           
   327                           ;hehe.c: 154: else if(effect == 1)
   328  007B90  0442               	decf	_effect,w,c
   329  007B92  1043               	iorwf	_effect+1,w,c
   330  007B94  B4D8               	btfsc	status,2,c
   331  007B96  D009               	goto	l72
   332  007B98  D00F               	goto	l71
   333  007B9A                     
   334                           ;hehe.c: 157: led.g += 5;
   335  007B9A  0E05               	movlw	5
   336  007B9C  2641               	addwf	_led+2,f,c
   337                           
   338                           ;hehe.c: 158: led_send(front);
   339  007B9E  C02A  F00D         	movff	main@front,led_send@front
   340  007BA2  C02B  F00E         	movff	main@front+1,led_send@front+1
   341  007BA6  ECDE  F03C         	call	_led_send	;wreg free
   342  007BAA                     l72:
   343  007BAA  0E81               	movlw	129
   344  007BAC  6441               	cpfsgt	_led+2,c
   345  007BAE  D7F5               	goto	l73
   346                           
   347                           ;hehe.c: 159: }
   348                           ;hehe.c: 160: effect++;
   349  007BB0  4A42               	infsnz	_effect,f,c
   350  007BB2  2A43               	incf	_effect+1,f,c
   351                           
   352                           ;hehe.c: 161: led.g = 130;
   353  007BB4  0E82               	movlw	130
   354  007BB6  D04F               	goto	L2
   355  007BB8                     l71:
   356                           
   357                           ;hehe.c: 163: else if(effect==2)
   358  007BB8  0E02               	movlw	2
   359  007BBA  1842               	xorwf	_effect,w,c
   360  007BBC  1043               	iorwf	_effect+1,w,c
   361  007BBE  B4D8               	btfsc	status,2,c
   362  007BC0  D009               	goto	l77
   363  007BC2  D00C               	goto	l76
   364  007BC4                     
   365                           ;hehe.c: 166: led.r -= 5;
   366  007BC4  0E05               	movlw	5
   367  007BC6  5E3F               	subwf	_led,f,c
   368                           
   369                           ;hehe.c: 167: led_send(front);
   370  007BC8  C02A  F00D         	movff	main@front,led_send@front
   371  007BCC  C02B  F00E         	movff	main@front+1,led_send@front+1
   372  007BD0  ECDE  F03C         	call	_led_send	;wreg free
   373  007BD4                     l77:
   374  007BD4  503F               	movf	_led,w,c
   375  007BD6  A4D8               	btfss	status,2,c
   376  007BD8  D7F5               	goto	l78
   377  007BDA  D050               	goto	L8
   378  007BDC                     l76:
   379                           
   380                           ;hehe.c: 172: else if(effect==3)
   381  007BDC  0E03               	movlw	3
   382  007BDE  1842               	xorwf	_effect,w,c
   383  007BE0  1043               	iorwf	_effect+1,w,c
   384  007BE2  B4D8               	btfsc	status,2,c
   385  007BE4  D009               	goto	l82
   386  007BE6  D00F               	goto	l81
   387  007BE8                     
   388                           ;hehe.c: 175: led.b += 5;
   389  007BE8  0E05               	movlw	5
   390  007BEA  2640               	addwf	_led+1,f,c
   391                           
   392                           ;hehe.c: 176: led_send(front);
   393  007BEC  C02A  F00D         	movff	main@front,led_send@front
   394  007BF0  C02B  F00E         	movff	main@front+1,led_send@front+1
   395  007BF4  ECDE  F03C         	call	_led_send	;wreg free
   396  007BF8                     l82:
   397  007BF8  0E81               	movlw	129
   398  007BFA  6440               	cpfsgt	_led+1,c
   399  007BFC  D7F5               	goto	l83
   400                           
   401                           ;hehe.c: 177: }
   402                           ;hehe.c: 178: effect++;
   403  007BFE  4A42               	infsnz	_effect,f,c
   404  007C00  2A43               	incf	_effect+1,f,c
   405                           
   406                           ;hehe.c: 179: led.b = 130;
   407  007C02  0E82               	movlw	130
   408  007C04  D056               	goto	L4
   409  007C06                     l81:
   410                           
   411                           ;hehe.c: 181: else if(effect==4)
   412  007C06  0E04               	movlw	4
   413  007C08  1842               	xorwf	_effect,w,c
   414  007C0A  1043               	iorwf	_effect+1,w,c
   415  007C0C  B4D8               	btfsc	status,2,c
   416  007C0E  D009               	goto	l87
   417  007C10  D00E               	goto	l86
   418  007C12                     
   419                           ;hehe.c: 184: led.r += 5;
   420  007C12  0E05               	movlw	5
   421  007C14  263F               	addwf	_led,f,c
   422                           
   423                           ;hehe.c: 185: led_send(front);
   424  007C16  C02A  F00D         	movff	main@front,led_send@front
   425  007C1A  C02B  F00E         	movff	main@front+1,led_send@front+1
   426  007C1E  ECDE  F03C         	call	_led_send	;wreg free
   427  007C22                     l87:
   428  007C22  0E81               	movlw	129
   429  007C24  643F               	cpfsgt	_led,c
   430  007C26  D7F5               	goto	l88
   431  007C28  D7B0               	goto	u370
   432  007C2A                     l1106:
   433                           
   434                           ;hehe.c: 188: led.r = 130;
   435  007C2A  0E82               	movlw	130
   436  007C2C  D02A               	goto	L5
   437  007C2E                     l86:
   438                           
   439                           ;hehe.c: 190: else if(effect==5)
   440  007C2E  0E05               	movlw	5
   441  007C30  1842               	xorwf	_effect,w,c
   442  007C32  1043               	iorwf	_effect+1,w,c
   443  007C34  B4D8               	btfsc	status,2,c
   444  007C36  D009               	goto	l92
   445  007C38  D010               	goto	l91
   446  007C3A                     
   447                           ;hehe.c: 193: led.g -= 5;
   448  007C3A  0E05               	movlw	5
   449  007C3C  5E41               	subwf	_led+2,f,c
   450                           
   451                           ;hehe.c: 194: led_send(front);
   452  007C3E  C02A  F00D         	movff	main@front,led_send@front
   453  007C42  C02B  F00E         	movff	main@front+1,led_send@front+1
   454  007C46  ECDE  F03C         	call	_led_send	;wreg free
   455  007C4A                     l92:
   456  007C4A  5041               	movf	_led+2,w,c
   457  007C4C  A4D8               	btfss	status,2,c
   458  007C4E  D7F5               	goto	l93
   459                           
   460                           ;hehe.c: 195: }
   461                           ;hehe.c: 196: effect++;
   462  007C50  4A42               	infsnz	_effect,f,c
   463  007C52  2A43               	incf	_effect+1,f,c
   464                           
   465                           ;hehe.c: 197: led.g = 0;
   466  007C54  0E00               	movlw	0
   467  007C56                     L2:
   468  007C56  6E41               	movwf	_led+2,c
   469                           
   470                           ;hehe.c: 198: }
   471  007C58  D02D               	goto	l101
   472  007C5A                     l91:
   473                           
   474                           ;hehe.c: 199: else if(effect==6)
   475  007C5A  0E06               	movlw	6
   476  007C5C  1842               	xorwf	_effect,w,c
   477  007C5E  1043               	iorwf	_effect+1,w,c
   478  007C60  B4D8               	btfsc	status,2,c
   479  007C62  D009               	goto	l97
   480  007C64  D010               	goto	l96
   481  007C66                     
   482                           ;hehe.c: 202: led.r -= 5;
   483  007C66  0E05               	movlw	5
   484  007C68  5E3F               	subwf	_led,f,c
   485                           
   486                           ;hehe.c: 203: led_send(front);
   487  007C6A  C02A  F00D         	movff	main@front,led_send@front
   488  007C6E  C02B  F00E         	movff	main@front+1,led_send@front+1
   489  007C72  ECDE  F03C         	call	_led_send	;wreg free
   490  007C76                     l97:
   491  007C76  503F               	movf	_led,w,c
   492  007C78  A4D8               	btfss	status,2,c
   493  007C7A  D7F5               	goto	l98
   494  007C7C                     L8:
   495                           
   496                           ;hehe.c: 204: }
   497                           ;hehe.c: 205: effect++;
   498  007C7C  4A42               	infsnz	_effect,f,c
   499  007C7E  2A43               	incf	_effect+1,f,c
   500                           
   501                           ;hehe.c: 206: led.r = 0;
   502  007C80  0E00               	movlw	0
   503  007C82                     L5:
   504  007C82  6E3F               	movwf	_led,c
   505                           
   506                           ;hehe.c: 207: }
   507  007C84  D017               	goto	l101
   508  007C86                     l96:
   509                           
   510                           ;hehe.c: 208: else if(effect==7)
   511  007C86  0E07               	movlw	7
   512  007C88  1842               	xorwf	_effect,w,c
   513  007C8A  1043               	iorwf	_effect+1,w,c
   514  007C8C  B4D8               	btfsc	status,2,c
   515  007C8E  D009               	goto	l102
   516  007C90  D011               	goto	l101
   517  007C92                     
   518                           ;hehe.c: 211: led.b -= 5;
   519  007C92  0E05               	movlw	5
   520  007C94  5E40               	subwf	_led+1,f,c
   521                           
   522                           ;hehe.c: 212: led_send(front);
   523  007C96  C02A  F00D         	movff	main@front,led_send@front
   524  007C9A  C02B  F00E         	movff	main@front+1,led_send@front+1
   525  007C9E  ECDE  F03C         	call	_led_send	;wreg free
   526  007CA2                     l102:
   527  007CA2  5040               	movf	_led+1,w,c
   528  007CA4  A4D8               	btfss	status,2,c
   529  007CA6  D7F5               	goto	l103
   530                           
   531                           ;hehe.c: 213: }
   532                           ;hehe.c: 214: effect=0;
   533  007CA8  0E00               	movlw	0
   534  007CAA  6E43               	movwf	_effect+1,c
   535  007CAC  0E00               	movlw	0
   536  007CAE  6E42               	movwf	_effect,c
   537                           
   538                           ;hehe.c: 215: led.b = 0;
   539  007CB0  0E00               	movlw	0
   540  007CB2                     L4:
   541  007CB2  6E40               	movwf	_led+1,c
   542  007CB4                     l101:
   543                           
   544                           ;hehe.c: 216: }
   545                           ;hehe.c: 242: int k = 1 , l = 5;
   546  007CB4  0E00               	movlw	0
   547  007CB6  6E27               	movwf	main@k+1,c
   548  007CB8  0E01               	movlw	1
   549  007CBA  6E26               	movwf	main@k,c
   550  007CBC  0E00               	movlw	0
   551  007CBE  6E29               	movwf	main@l+1,c
   552  007CC0  0E05               	movlw	5
   553  007CC2  6E28               	movwf	main@l,c
   554                           
   555                           ;hehe.c: 243: while( k > 0 ) {
   556  007CC4  D012               	goto	l105
   557  007CC6                     l1148:
   558                           
   559                           ;hehe.c: 244: l = 5;
   560  007CC6  0E00               	movlw	0
   561  007CC8  6E29               	movwf	main@l+1,c
   562  007CCA  0E05               	movlw	5
   563  007CCC  6E28               	movwf	main@l,c
   564                           
   565                           ;hehe.c: 245: while( l > 0) {
   566  007CCE  D003               	goto	l107
   567  007CD0                     l1150:
   568                           
   569                           ;hehe.c: 246: l--;
   570  007CD0  0628               	decf	main@l,f,c
   571  007CD2  A0D8               	btfss	status,0,c
   572  007CD4  0629               	decf	main@l+1,f,c
   573  007CD6                     l107:
   574  007CD6  BE29               	btfsc	main@l+1,7,c
   575  007CD8  D005               	goto	u520
   576  007CDA  5029               	movf	main@l+1,w,c
   577  007CDC  E1F9               	bnz	l1150
   578  007CDE  0428               	decf	main@l,w,c
   579  007CE0  B0D8               	btfsc	status,0,c
   580  007CE2  D7F6               	goto	l108
   581  007CE4                     u520:
   582                           
   583                           ;hehe.c: 247: }
   584                           ;hehe.c: 248: k--;
   585  007CE4  0626               	decf	main@k,f,c
   586  007CE6  A0D8               	btfss	status,0,c
   587  007CE8  0627               	decf	main@k+1,f,c
   588  007CEA                     l105:
   589  007CEA  BE27               	btfsc	main@k+1,7,c
   590  007CEC  D005               	goto	u530
   591  007CEE  5027               	movf	main@k+1,w,c
   592  007CF0  E1EA               	bnz	l1148
   593  007CF2  0426               	decf	main@k,w,c
   594  007CF4  B0D8               	btfsc	status,0,c
   595  007CF6  D7E7               	goto	l106
   596  007CF8                     u530:
   597                           
   598                           ;hehe.c: 249: }
   599                           ;hehe.c: 250: GIE = 1; while (!GIE);
   600  007CF8  8EF2               	bsf	intcon,7,c	;volatile
   601  007CFA  BEF2               	btfsc	intcon,7,c	;volatile
   602  007CFC  D732               	goto	l62
   603  007CFE  D7FD               	goto	l112
   604  007D00                     __end_of_main:
   605                           	opt stack 0
   606                           intcon	equ	0xFF2
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           status	equ	0xFD8
   610                           
   611 ;; *************** function _led_send *****************
   612 ;; Defined at:
   613 ;;		line 38 in file "hehe.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  front           2   12[COMRAM] int 
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  i               4   27[COMRAM] long 
   618 ;;  val             4   31[COMRAM] long 
   619 ;;  back_24         4   23[COMRAM] long 
   620 ;;  front_24        4   19[COMRAM] long 
   621 ;;  buf             2   35[COMRAM] int 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   631 ;;      Params:         2       0       0       0       0       0       0
   632 ;;      Locals:        18       0       0       0       0       0       0
   633 ;;      Temps:          5       0       0       0       0       0       0
   634 ;;      Totals:        25       0       0       0       0       0       0
   635 ;;Total ram usage:       25 bytes
   636 ;; Hardware stack levels used:    1
   637 ;; Hardware stack levels required when called:    1
   638 ;; This function calls:
   639 ;;		___lmul
   640 ;;		___wmul
   641 ;;		_bitflip
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text1
   648  0079BC                     __ptext1:
   649                           	opt stack 0
   650  0079BC                     _led_send:
   651                           	opt stack 29
   652                           
   653                           ;hehe.c: 39: tmp1=bitflip(led.g);
   654                           
   655                           ;incstack = 0
   656  0079BC  5041               	movf	_led+2,w,c
   657  0079BE  EC7A  F03C         	call	_bitflip
   658  0079C2  5001               	movf	?_bitflip,w,c
   659  0079C4  6E3A               	movwf	_tmp1,c
   660                           
   661                           ;hehe.c: 40: tmp2=bitflip(led.r);
   662  0079C6  503F               	movf	_led,w,c
   663  0079C8  EC7A  F03C         	call	_bitflip
   664  0079CC  5001               	movf	?_bitflip,w,c
   665  0079CE  6E39               	movwf	_tmp2,c
   666                           
   667                           ;hehe.c: 41: tmp3=bitflip(led.b);
   668  0079D0  5040               	movf	_led+1,w,c
   669  0079D2  EC7A  F03C         	call	_bitflip
   670  0079D6  5001               	movf	?_bitflip,w,c
   671  0079D8  6E38               	movwf	_tmp3,c
   672                           
   673                           ;hehe.c: 42: long int front_24 = front * 24;
   674  0079DA  C00D  F001         	movff	led_send@front,___wmul@multiplier
   675  0079DE  C00E  F002         	movff	led_send@front+1,___wmul@multiplier+1
   676  0079E2  0E00               	movlw	0
   677  0079E4  6E04               	movwf	___wmul@multiplicand+1,c
   678  0079E6  0E18               	movlw	24
   679  0079E8  6E03               	movwf	___wmul@multiplicand,c
   680  0079EA  EC3C  F03C         	call	___wmul	;wreg free
   681  0079EE  C001  F014         	movff	?___wmul,led_send@front_24
   682  0079F2  C002  F015         	movff	?___wmul+1,led_send@front_24+1
   683  0079F6  0E00               	movlw	0
   684  0079F8  BE15               	btfsc	led_send@front_24+1,7,c
   685  0079FA  0EFF               	movlw	-1
   686  0079FC  6E16               	movwf	led_send@front_24+2,c
   687  0079FE  6E17               	movwf	led_send@front_24+3,c
   688                           
   689                           ;hehe.c: 43: int buf = 24;
   690  007A00  0E00               	movlw	0
   691  007A02  6E25               	movwf	led_send@buf+1,c
   692  007A04  0E18               	movlw	24
   693  007A06  6E24               	movwf	led_send@buf,c
   694                           
   695                           ;hehe.c: 44: long int val = (long int)tmp1;
   696  007A08  503A               	movf	_tmp1,w,c
   697  007A0A  6E20               	movwf	led_send@val,c
   698  007A0C  6A21               	clrf	led_send@val+1,c
   699  007A0E  6A22               	clrf	led_send@val+2,c
   700  007A10  6A23               	clrf	led_send@val+3,c
   701                           
   702                           ;hehe.c: 45: long int back_24 = (ledlength - front ) * 24;
   703  007A12  C00D  F00F         	movff	led_send@front,??_led_send
   704  007A16  C00E  F010         	movff	led_send@front+1,??_led_send+1
   705  007A1A  0E00               	movlw	0
   706  007A1C  BE10               	btfsc	(??_led_send+1)& (0+255),7,c
   707  007A1E  0EFF               	movlw	255
   708  007A20  6E11               	movwf	(??_led_send+2)& (0+255),c
   709  007A22  6E12               	movwf	(??_led_send+3)& (0+255),c
   710  007A24  1E0F               	comf	??_led_send,f,c
   711  007A26  1E10               	comf	??_led_send+1,f,c
   712  007A28  1E11               	comf	??_led_send+2,f,c
   713  007A2A  1E12               	comf	??_led_send+3,f,c
   714  007A2C  2A0F               	incf	??_led_send,f,c
   715  007A2E  0E00               	movlw	0
   716  007A30  2210               	addwfc	??_led_send+1,f,c
   717  007A32  2211               	addwfc	??_led_send+2,f,c
   718  007A34  2212               	addwfc	??_led_send+3,f,c
   719  007A36  5030               	movf	_ledlength,w,c
   720  007A38  240F               	addwf	??_led_send,w,c
   721  007A3A  6E01               	movwf	___lmul@multiplier,c
   722  007A3C  5031               	movf	_ledlength+1,w,c
   723  007A3E  2010               	addwfc	??_led_send+1,w,c
   724  007A40  6E02               	movwf	___lmul@multiplier+1,c
   725  007A42  5032               	movf	_ledlength+2,w,c
   726  007A44  2011               	addwfc	??_led_send+2,w,c
   727  007A46  6E03               	movwf	___lmul@multiplier+2,c
   728  007A48  5033               	movf	_ledlength+3,w,c
   729  007A4A  2012               	addwfc	??_led_send+3,w,c
   730  007A4C  6E04               	movwf	___lmul@multiplier+3,c
   731  007A4E  0E18               	movlw	24
   732  007A50  6E05               	movwf	___lmul@multiplicand,c
   733  007A52  0E00               	movlw	0
   734  007A54  6E06               	movwf	___lmul@multiplicand+1,c
   735  007A56  0E00               	movlw	0
   736  007A58  6E07               	movwf	___lmul@multiplicand+2,c
   737  007A5A  0E00               	movlw	0
   738  007A5C  6E08               	movwf	___lmul@multiplicand+3,c
   739  007A5E  EC4F  F03C         	call	___lmul	;wreg free
   740  007A62  C001  F018         	movff	?___lmul,led_send@back_24
   741  007A66  C002  F019         	movff	?___lmul+1,led_send@back_24+1
   742  007A6A  C003  F01A         	movff	?___lmul+2,led_send@back_24+2
   743  007A6E  C004  F01B         	movff	?___lmul+3,led_send@back_24+3
   744                           
   745                           ;hehe.c: 58: for(long int i = 0; i < ledmax*24 ; i++ ){
   746  007A72  0E00               	movlw	0
   747  007A74  6E1C               	movwf	led_send@i,c
   748  007A76  0E00               	movlw	0
   749  007A78  6E1D               	movwf	led_send@i+1,c
   750  007A7A  0E00               	movlw	0
   751  007A7C  6E1E               	movwf	led_send@i+2,c
   752  007A7E  0E00               	movlw	0
   753  007A80  6E1F               	movwf	led_send@i+3,c
   754  007A82  D038               	goto	l41
   755  007A84                     
   756                           ;hehe.c: 60: if(buf== 0){
   757  007A84  5024               	movf	led_send@buf,w,c
   758  007A86  1025               	iorwf	led_send@buf+1,w,c
   759  007A88  A4D8               	btfss	status,2,c
   760  007A8A  D006               	goto	l43
   761                           
   762                           ;hehe.c: 61: buf = 24;
   763  007A8C  0E00               	movlw	0
   764  007A8E  6E25               	movwf	led_send@buf+1,c
   765  007A90  0E18               	movlw	24
   766  007A92  6E24               	movwf	led_send@buf,c
   767                           
   768                           ;hehe.c: 62: val = (long int)tmp1;
   769  007A94  503A               	movf	_tmp1,w,c
   770  007A96  D00D               	goto	L7
   771  007A98                     l43:
   772                           
   773                           ;hehe.c: 64: else if(buf== 16){
   774  007A98  0E10               	movlw	16
   775  007A9A  1824               	xorwf	led_send@buf,w,c
   776  007A9C  1025               	iorwf	led_send@buf+1,w,c
   777  007A9E  A4D8               	btfss	status,2,c
   778  007AA0  D002               	goto	l45
   779                           
   780                           ;hehe.c: 66: val = (long int)tmp2;
   781  007AA2  5039               	movf	_tmp2,w,c
   782  007AA4  D006               	goto	L7
   783  007AA6                     l45:
   784                           
   785                           ;hehe.c: 68: else if(buf== 8){
   786  007AA6  0E08               	movlw	8
   787  007AA8  1824               	xorwf	led_send@buf,w,c
   788  007AAA  1025               	iorwf	led_send@buf+1,w,c
   789  007AAC  A4D8               	btfss	status,2,c
   790  007AAE  D005               	goto	l47
   791                           
   792                           ;hehe.c: 69: val = (long int)tmp3;
   793  007AB0  5038               	movf	_tmp3,w,c
   794  007AB2                     L7:
   795  007AB2  6E20               	movwf	led_send@val,c
   796  007AB4  6A21               	clrf	led_send@val+1,c
   797  007AB6  6A22               	clrf	led_send@val+2,c
   798  007AB8  6A23               	clrf	led_send@val+3,c
   799  007ABA                     l47:
   800                           
   801                           ;hehe.c: 70: }
   802                           ;hehe.c: 72: if (val & 1) {
   803  007ABA  A020               	btfss	led_send@val,0,c
   804  007ABC  D007               	goto	l48
   805                           
   806                           ;hehe.c: 73: PORTDbits.RD0 = 1;
   807  007ABE  8083               	bsf	3971,0,c	;volatile
   808                           
   809                           ;hehe.c: 74: __nop();
   810  007AC0  F000               	nop	
   811                           
   812                           ;hehe.c: 75: __nop();
   813  007AC2  F000               	nop	
   814                           
   815                           ;hehe.c: 76: __nop();
   816  007AC4  F000               	nop	
   817                           
   818                           ;hehe.c: 77: __nop();
   819  007AC6  F000               	nop	
   820                           
   821                           ;hehe.c: 78: PORTDbits.RD0 = 0;
   822  007AC8  9083               	bcf	3971,0,c	;volatile
   823                           
   824                           ;hehe.c: 80: } else {
   825  007ACA  D006               	goto	l49
   826  007ACC                     l48:
   827                           
   828                           ;hehe.c: 81: PORTDbits.RD0 = 1;
   829  007ACC  8083               	bsf	3971,0,c	;volatile
   830                           
   831                           ;hehe.c: 82: PORTDbits.RD0 = 0;
   832  007ACE  9083               	bcf	3971,0,c	;volatile
   833                           
   834                           ;hehe.c: 83: __nop();
   835  007AD0  F000               	nop	
   836                           
   837                           ;hehe.c: 84: __nop();
   838  007AD2  F000               	nop	
   839                           
   840                           ;hehe.c: 85: __nop();
   841  007AD4  F000               	nop	
   842                           
   843                           ;hehe.c: 86: __nop();
   844  007AD6  F000               	nop	
   845  007AD8                     l49:
   846                           
   847                           ;hehe.c: 87: }
   848                           ;hehe.c: 88: val >>= (unsigned char)1;
   849  007AD8  3423               	rlcf	led_send@val+3,w,c
   850  007ADA  3223               	rrcf	led_send@val+3,f,c
   851  007ADC  3222               	rrcf	led_send@val+2,f,c
   852  007ADE  3221               	rrcf	led_send@val+1,f,c
   853  007AE0  3220               	rrcf	led_send@val,f,c
   854                           
   855                           ;hehe.c: 89: buf--;
   856  007AE2  0624               	decf	led_send@buf,f,c
   857  007AE4  A0D8               	btfss	status,0,c
   858  007AE6  0625               	decf	led_send@buf+1,f,c
   859  007AE8  0E01               	movlw	1
   860  007AEA  261C               	addwf	led_send@i,f,c
   861  007AEC  0E00               	movlw	0
   862  007AEE  221D               	addwfc	led_send@i+1,f,c
   863  007AF0  221E               	addwfc	led_send@i+2,f,c
   864  007AF2  221F               	addwfc	led_send@i+3,f,c
   865  007AF4                     l41:
   866  007AF4  C034  F001         	movff	_ledmax,___wmul@multiplier
   867  007AF8  C035  F002         	movff	_ledmax+1,___wmul@multiplier+1
   868  007AFC  0E00               	movlw	0
   869  007AFE  6E04               	movwf	___wmul@multiplicand+1,c
   870  007B00  0E18               	movlw	24
   871  007B02  6E03               	movwf	___wmul@multiplicand,c
   872  007B04  EC3C  F03C         	call	___wmul	;wreg free
   873  007B08  C001  F00F         	movff	?___wmul,??_led_send
   874  007B0C  C002  F010         	movff	?___wmul+1,??_led_send+1
   875  007B10  0E00               	movlw	0
   876  007B12  BE10               	btfsc	(??_led_send+1)& (0+255),7,c
   877  007B14  0EFF               	movlw	255
   878  007B16  6E11               	movwf	(??_led_send+2)& (0+255),c
   879  007B18  6E12               	movwf	(??_led_send+3)& (0+255),c
   880  007B1A  500F               	movf	??_led_send,w,c
   881  007B1C  5C1C               	subwf	led_send@i,w,c
   882  007B1E  5010               	movf	??_led_send+1,w,c
   883  007B20  581D               	subwfb	led_send@i+1,w,c
   884  007B22  5011               	movf	??_led_send+2,w,c
   885  007B24  581E               	subwfb	led_send@i+2,w,c
   886  007B26  501F               	movf	led_send@i+3,w,c
   887  007B28  0A80               	xorlw	128
   888  007B2A  6E13               	movwf	(??_led_send+4)& (0+255),c
   889  007B2C  5012               	movf	??_led_send+3,w,c
   890  007B2E  0A80               	xorlw	128
   891  007B30  5813               	subwfb	(??_led_send+4)& (0+255),w,c
   892  007B32  B0D8               	btfsc	status,0,c
   893  007B34  0012               	return	
   894  007B36  D7A6               	goto	l42
   895  007B38                     __end_of_led_send:
   896                           	opt stack 0
   897                           intcon	equ	0xFF2
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _bitflip *****************
   903 ;; Defined at:
   904 ;;		line 105 in file "hehe.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  b               1    wreg     unsigned char 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  b               1    6[COMRAM] unsigned char 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  4    0[COMRAM] unsigned long 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   918 ;;      Params:         4       0       0       0       0       0       0
   919 ;;      Locals:         1       0       0       0       0       0       0
   920 ;;      Temps:          2       0       0       0       0       0       0
   921 ;;      Totals:         7       0       0       0       0       0       0
   922 ;;Total ram usage:        7 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; This function calls:
   925 ;;		Nothing
   926 ;; This function is called by:
   927 ;;		_led_send
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text2
   933  0078F4                     __ptext2:
   934                           	opt stack 0
   935  0078F4                     _bitflip:
   936                           	opt stack 29
   937                           
   938                           ;incstack = 0
   939                           ;bitflip@b stored from wreg
   940  0078F4  6E07               	movwf	bitflip@b,c
   941                           
   942                           ;hehe.c: 106: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
   943  0078F6  C007  F005         	movff	bitflip@b,??_bitflip
   944  0078FA  0E0F               	movlw	15
   945  0078FC  1605               	andwf	??_bitflip,f,c
   946  0078FE  3A05               	swapf	??_bitflip,f,c
   947  007900  0EF0               	movlw	240
   948  007902  1605               	andwf	??_bitflip,f,c
   949  007904  3807               	swapf	bitflip@b,w,c
   950  007906  0B0F               	andlw	15
   951  007908  0B0F               	andlw	15
   952  00790A  1005               	iorwf	??_bitflip,w,c
   953  00790C  6E07               	movwf	bitflip@b,c
   954                           
   955                           ;hehe.c: 107: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
   956  00790E  C007  F005         	movff	bitflip@b,??_bitflip
   957  007912  0E33               	movlw	51
   958  007914  1605               	andwf	??_bitflip,f,c
   959  007916  90D8               	bcf	status,0,c
   960  007918  3605               	rlcf	??_bitflip,f,c
   961  00791A  90D8               	bcf	status,0,c
   962  00791C  3605               	rlcf	??_bitflip,f,c
   963  00791E  4007               	rrncf	bitflip@b,w,c
   964  007920  42E8               	rrncf	wreg,f,c
   965  007922  0B3F               	andlw	63
   966  007924  0B33               	andlw	51
   967  007926  1005               	iorwf	??_bitflip,w,c
   968  007928  6E07               	movwf	bitflip@b,c
   969                           
   970                           ;hehe.c: 108: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   971  00792A  C007  F005         	movff	bitflip@b,??_bitflip
   972  00792E  0E55               	movlw	85
   973  007930  1605               	andwf	??_bitflip,f,c
   974  007932  90D8               	bcf	status,0,c
   975  007934  3405               	rlcf	??_bitflip,w,c
   976  007936  6E06               	movwf	(??_bitflip+1)& (0+255),c
   977  007938  90D8               	bcf	status,0,c
   978  00793A  3007               	rrcf	bitflip@b,w,c
   979  00793C  0B55               	andlw	85
   980  00793E  1006               	iorwf	??_bitflip+1,w,c
   981  007940  6E07               	movwf	bitflip@b,c
   982                           
   983                           ;hehe.c: 109: return (unsigned char)b;
   984  007942  5007               	movf	bitflip@b,w,c
   985  007944  6E01               	movwf	?_bitflip,c
   986  007946  6A02               	clrf	?_bitflip+1,c
   987  007948  6A03               	clrf	?_bitflip+2,c
   988  00794A  6A04               	clrf	?_bitflip+3,c
   989  00794C  0012               	return	
   990  00794E                     __end_of_bitflip:
   991                           	opt stack 0
   992                           intcon	equ	0xFF2
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           status	equ	0xFD8
   996                           
   997 ;; *************** function ___lmul *****************
   998 ;; Defined at:
   999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  multiplier      4    0[COMRAM] unsigned long 
  1002 ;;  multiplicand    4    4[COMRAM] unsigned long 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  product         4    8[COMRAM] unsigned long 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  4    0[COMRAM] unsigned long 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, status,0
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1014 ;;      Params:         8       0       0       0       0       0       0
  1015 ;;      Locals:         4       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0
  1017 ;;      Totals:        12       0       0       0       0       0       0
  1018 ;;Total ram usage:       12 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_led_send
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text3
  1028  00789E                     __ptext3:
  1029                           	opt stack 0
  1030  00789E                     ___lmul:
  1031                           	opt stack 29
  1032                           
  1033                           ;incstack = 0
  1034  00789E  0E00               	movlw	0
  1035  0078A0  6E09               	movwf	___lmul@product,c
  1036  0078A2  0E00               	movlw	0
  1037  0078A4  6E0A               	movwf	___lmul@product+1,c
  1038  0078A6  0E00               	movlw	0
  1039  0078A8  6E0B               	movwf	___lmul@product+2,c
  1040  0078AA  0E00               	movlw	0
  1041  0078AC  6E0C               	movwf	___lmul@product+3,c
  1042  0078AE  A001               	btfss	___lmul@multiplier,0,c
  1043  0078B0  D008               	goto	l129
  1044  0078B2  5005               	movf	___lmul@multiplicand,w,c
  1045  0078B4  2609               	addwf	___lmul@product,f,c
  1046  0078B6  5006               	movf	___lmul@multiplicand+1,w,c
  1047  0078B8  220A               	addwfc	___lmul@product+1,f,c
  1048  0078BA  5007               	movf	___lmul@multiplicand+2,w,c
  1049  0078BC  220B               	addwfc	___lmul@product+2,f,c
  1050  0078BE  5008               	movf	___lmul@multiplicand+3,w,c
  1051  0078C0  220C               	addwfc	___lmul@product+3,f,c
  1052  0078C2                     l129:
  1053  0078C2  90D8               	bcf	status,0,c
  1054  0078C4  3605               	rlcf	___lmul@multiplicand,f,c
  1055  0078C6  3606               	rlcf	___lmul@multiplicand+1,f,c
  1056  0078C8  3607               	rlcf	___lmul@multiplicand+2,f,c
  1057  0078CA  3608               	rlcf	___lmul@multiplicand+3,f,c
  1058  0078CC  90D8               	bcf	status,0,c
  1059  0078CE  3204               	rrcf	___lmul@multiplier+3,f,c
  1060  0078D0  3203               	rrcf	___lmul@multiplier+2,f,c
  1061  0078D2  3202               	rrcf	___lmul@multiplier+1,f,c
  1062  0078D4  3201               	rrcf	___lmul@multiplier,f,c
  1063  0078D6  5001               	movf	___lmul@multiplier,w,c
  1064  0078D8  1002               	iorwf	___lmul@multiplier+1,w,c
  1065  0078DA  1003               	iorwf	___lmul@multiplier+2,w,c
  1066  0078DC  1004               	iorwf	___lmul@multiplier+3,w,c
  1067  0078DE  A4D8               	btfss	status,2,c
  1068  0078E0  D7E6               	goto	l128
  1069  0078E2  C009  F001         	movff	___lmul@product,?___lmul
  1070  0078E6  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  1071  0078EA  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  1072  0078EE  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  1073  0078F2  0012               	return		;funcret
  1074  0078F4                     __end_of___lmul:
  1075                           	opt stack 0
  1076                           intcon	equ	0xFF2
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           status	equ	0xFD8
  1080                           
  1081 ;; *************** function _init *****************
  1082 ;; Defined at:
  1083 ;;		line 112 in file "hehe.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1097 ;;      Params:         0       0       0       0       0       0       0
  1098 ;;      Locals:         0       0       0       0       0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0
  1100 ;;      Totals:         0       0       0       0       0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    1
  1104 ;; This function calls:
  1105 ;;		___wmul
  1106 ;; This function is called by:
  1107 ;;		_main
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text4
  1112  00794E                     __ptext4:
  1113                           	opt stack 0
  1114  00794E                     _init:
  1115                           	opt stack 29
  1116                           
  1117                           ;hehe.c: 113: OSCCONbits.IRCF2 = 1;
  1118                           
  1119                           ;incstack = 0
  1120  00794E  8CD3               	bsf	4051,6,c	;volatile
  1121                           
  1122                           ;hehe.c: 114: OSCCONbits.IRCF1 = 1;
  1123  007950  8AD3               	bsf	4051,5,c	;volatile
  1124                           
  1125                           ;hehe.c: 115: OSCCONbits.IRCF0 = 1;
  1126  007952  88D3               	bsf	4051,4,c	;volatile
  1127                           
  1128                           ;hehe.c: 116: OSCTUNEbits.PLLEN=1;
  1129  007954  8C9B               	bsf	3995,6,c	;volatile
  1130                           
  1131                           ;hehe.c: 119: ledlength=300;
  1132  007956  0E2C               	movlw	44
  1133  007958  6E30               	movwf	_ledlength,c
  1134  00795A  0E01               	movlw	1
  1135  00795C  6E31               	movwf	_ledlength+1,c
  1136  00795E  0E00               	movlw	0
  1137  007960  6E32               	movwf	_ledlength+2,c
  1138  007962  0E00               	movlw	0
  1139  007964  6E33               	movwf	_ledlength+3,c
  1140                           
  1141                           ;hehe.c: 120: lednum=1;
  1142  007966  0E00               	movlw	0
  1143  007968  6E37               	movwf	_lednum+1,c
  1144  00796A  0E01               	movlw	1
  1145  00796C  6E36               	movwf	_lednum,c
  1146                           
  1147                           ;hehe.c: 121: lednum_24= lednum*24;
  1148  00796E  C036  F001         	movff	_lednum,___wmul@multiplier
  1149  007972  C037  F002         	movff	_lednum+1,___wmul@multiplier+1
  1150  007976  0E00               	movlw	0
  1151  007978  6E04               	movwf	___wmul@multiplicand+1,c
  1152  00797A  0E18               	movlw	24
  1153  00797C  6E03               	movwf	___wmul@multiplicand,c
  1154  00797E  EC3C  F03C         	call	___wmul	;wreg free
  1155  007982  C001  F02C         	movff	?___wmul,_lednum_24
  1156  007986  C002  F02D         	movff	?___wmul+1,_lednum_24+1
  1157  00798A  0E00               	movlw	0
  1158  00798C  BE2D               	btfsc	_lednum_24+1,7,c
  1159  00798E  0EFF               	movlw	-1
  1160  007990  6E2E               	movwf	_lednum_24+2,c
  1161  007992  6E2F               	movwf	_lednum_24+3,c
  1162                           
  1163                           ;hehe.c: 122: ledmax=400;
  1164  007994  0E01               	movlw	1
  1165  007996  6E35               	movwf	_ledmax+1,c
  1166  007998  0E90               	movlw	144
  1167  00799A  6E34               	movwf	_ledmax,c
  1168                           
  1169                           ;hehe.c: 124: led.r = 100;
  1170  00799C  0E64               	movlw	100
  1171  00799E  6E3F               	movwf	_led,c
  1172                           
  1173                           ;hehe.c: 125: led.g = 1;
  1174  0079A0  0E01               	movlw	1
  1175  0079A2  6E41               	movwf	_led+2,c
  1176                           
  1177                           ;hehe.c: 126: led.b = 1;
  1178  0079A4  0E01               	movlw	1
  1179  0079A6  6E40               	movwf	_led+1,c
  1180                           
  1181                           ;hehe.c: 128: isFlow=0;
  1182  0079A8  0E00               	movlw	0
  1183  0079AA  6E45               	movwf	_isFlow+1,c
  1184  0079AC  0E00               	movlw	0
  1185  0079AE  6E44               	movwf	_isFlow,c
  1186                           
  1187                           ;hehe.c: 129: effect=0;
  1188  0079B0  0E00               	movlw	0
  1189  0079B2  6E43               	movwf	_effect+1,c
  1190  0079B4  0E00               	movlw	0
  1191  0079B6  6E42               	movwf	_effect,c
  1192                           
  1193                           ;hehe.c: 131: TRISDbits.RD0 = 0;
  1194  0079B8  9095               	bcf	3989,0,c	;volatile
  1195  0079BA  0012               	return		;funcret
  1196  0079BC                     __end_of_init:
  1197                           	opt stack 0
  1198                           intcon	equ	0xFF2
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           status	equ	0xFD8
  1202                           
  1203 ;; *************** function ___wmul *****************
  1204 ;; Defined at:
  1205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  multiplier      2    0[COMRAM] unsigned int 
  1208 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  product         2    4[COMRAM] unsigned int 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  2    0[COMRAM] unsigned int 
  1213 ;; Registers used:
  1214 ;;		wreg, status,2, status,0, prodl, prodh
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1220 ;;      Params:         4       0       0       0       0       0       0
  1221 ;;      Locals:         2       0       0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0       0       0
  1223 ;;      Totals:         6       0       0       0       0       0       0
  1224 ;;Total ram usage:        6 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_led_send
  1230 ;;		_init
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text5
  1235  007878                     __ptext5:
  1236                           	opt stack 0
  1237  007878                     ___wmul:
  1238                           	opt stack 29
  1239                           
  1240                           ;incstack = 0
  1241  007878  5001               	movf	___wmul@multiplier,w,c
  1242  00787A  0203               	mulwf	___wmul@multiplicand,c
  1243  00787C  CFF3 F005          	movff	prodl,___wmul@product
  1244  007880  CFF4 F006          	movff	prodh,___wmul@product+1
  1245  007884  5001               	movf	___wmul@multiplier,w,c
  1246  007886  0204               	mulwf	___wmul@multiplicand+1,c
  1247  007888  50F3               	movf	prodl,w,c
  1248  00788A  2606               	addwf	___wmul@product+1,f,c
  1249  00788C  5002               	movf	___wmul@multiplier+1,w,c
  1250  00788E  0203               	mulwf	___wmul@multiplicand,c
  1251  007890  50F3               	movf	prodl,w,c
  1252  007892  2606               	addwf	___wmul@product+1,f,c
  1253  007894  C005  F001         	movff	___wmul@product,?___wmul
  1254  007898  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1255  00789C  0012               	return	
  1256  00789E                     __end_of___wmul:
  1257                           	opt stack 0
  1258  0000                     prodh	equ	0xFF4
  1259                           prodl	equ	0xFF3
  1260                           intcon	equ	0xFF2
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           status	equ	0xFD8
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           status	equ	0xFD8
  1270                           
  1271                           	psect	rparam
  1272  0000                     prodh	equ	0xFF4
  1273                           prodl	equ	0xFF3
  1274                           intcon	equ	0xFF2
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     43      71
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_led_send
    _led_send->___lmul
    _init->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2914
                                             37 COMRAM     6     6      0
                            _bitflip
                               _init
                           _led_send
 ---------------------------------------------------------------------------------
 (1) _led_send                                            25    23      2    1916
                                             12 COMRAM    25    23      2
                             ___lmul
                             ___wmul
                            _bitflip
 ---------------------------------------------------------------------------------
 (2) _bitflip                                              7     3      4     157
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     615
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     615
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bitflip
   _init
     ___wmul
   _led_send
     ___lmul
     ___wmul
     _bitflip

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2B      47       1       55.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      14        0.0%
DATA                 0      0      47      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Dec 17 01:14:16 2017

                     l41 7AF4                       l42 7A84                       l43 7A98  
                     l45 7AA6                       l62 7B62                       l47 7ABA  
                     l71 7BB8                       l48 7ACC                       l72 7BAA  
                     l64 7B66                       l49 7AD8                       l81 7C06  
                     l73 7B9A                       l82 7BF8                       l66 7B90  
                     l91 7C5A                       l83 7BE8                       l67 7B84  
                     l92 7C4A                       l76 7BDC                       l68 7B74  
                     l93 7C3A                       l77 7BD4                       l86 7C2E  
                     l78 7BC4                       l87 7C22                       l96 7C86  
                     l88 7C12                       l97 7C76                       l98 7C66  
    ___wmul@multiplicand 0003                      l101 7CB4                      l102 7CA2  
                    l103 7C92                      l112 7CFA                      l105 7CEA  
                    l106 7CC6                      l107 7CD6                      l108 7CD0  
                    l128 78AE                      l129 78C2                      _GIE 007F97  
                    u520 7CE4                      u530 7CF8                      u370 7B8A  
           __CFG_CPD$OFF 000000                      _led 003F                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1106 7C2A  
                   l1150 7CD0                     l1148 7CC6                     _flag 0046  
                   _main 7B38                     _init 794E                     _tmp1 003A  
                   _tmp2 0039                     _tmp3 0038                     _temp 003B  
          __CFG_BOREN$ON 000000                     prodh 000FF4                     prodl 000FF3  
                   start 0002             ___param_bank 000000              led_send@buf 0024  
            led_send@val 0020                    ?_main 0001                    ?_init 0001  
          __CFG_PWRT$OFF 000000      ___lmul@multiplicand 0005          __end_of_bitflip 794E  
                  main@k 0026                    main@l 0028                    status 000FD8  
        led_send@back_24 0018          __initialization 7866             __end_of_main 7D00  
           __end_of_init 79BC                   ??_main 0026                   ??_init 0007  
          __activetblptr 000000         __end_of_led_send 7B38                   ___lmul 789E  
                 ___wmul 7878                   _effect 0042                   _isFlow 0044  
                 _ledmax 0034                   _lednum 0036                   clear_0 786C  
              ??_bitflip 0005               __accesstop 0080  __end_of__initialization 7872  
          ___rparam_used 000001           __pcstackCOMRAM 0001            led_send@front 000D  
       led_send@front_24 0014               __pnvCOMRAM 002C                  ?___lmul 0001  
                ?___wmul 0001           ___lmul@product 0009                ?_led_send 000D  
                __Hparam 0000                  __Lparam 0000          __size_of___lmul 0056  
        __size_of___wmul 0026                  __pcinit 7866                  __ramtop 0600  
                _bitflip 78F4                  __ptext0 7B38                  __ptext1 79BC  
                __ptext2 78F4                  __ptext3 789E                  __ptext4 794E  
                __ptext5 7878     end_of_initialization 7872               ??_led_send 000F  
                postinc0 000FEE                _PORTDbits 000F83                _TRISDbits 000F95  
         __end_of___lmul 78F4           __end_of___wmul 789E      start_initialization 7866  
       __CFG_OSC$INTIO67 000000                 ??___lmul 0009                 ??___wmul 0005  
            __pbssCOMRAM 003B        __size_of_led_send 017C                 ?_bitflip 0001  
              _ledlength 0030                _lednum_24 002C           ___wmul@product 0005  
      ___wmul@multiplier 0001                main@front 002A                led_send@i 001C  
      ___lmul@multiplier 0001                 __Hrparam 0000                 __Lrparam 0000  
       __size_of_bitflip 005A                 _led_send 79BC            __size_of_main 01C8  
          __size_of_init 006E                 bitflip@b 0007              _OSCTUNEbits 000F9B  
             _OSCCONbits 000FD3  
