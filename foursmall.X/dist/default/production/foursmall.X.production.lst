

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Dec 17 00:44:24 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.44
    23                           ; Generated 14/09/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  0000'                    __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _randx
    62  0000' 0001               	dw	1
    63  0002' 0000               	dw	0
    64                           
    65                           	psect	nvCOMRAM
    66  0000'                    __pnvCOMRAM:
    67                           	opt stack 0
    68  0000'                    _lednum_24:
    69                           	opt stack 0
    70  0000'                    	ds	4
    71  0004'                    _ledlength:
    72                           	opt stack 0
    73  0004'                    	ds	4
    74  0008'                    _ledmax:
    75                           	opt stack 0
    76  0008'                    	ds	2
    77  000A'                    _lednum:
    78                           	opt stack 0
    79  000A'                    	ds	2
    80  000C'                    _tmp3:
    81                           	opt stack 0
    82  000C'                    	ds	1
    83  000D'                    _tmp2:
    84                           	opt stack 0
    85  000D'                    	ds	1
    86  000E'                    _tmp1:
    87                           	opt stack 0
    88  000E'                    	ds	1
    89  0000                     _TRISDbits	set	3989
    90  0000                     _OSCTUNEbits	set	3995
    91  0000                     _OSCCONbits	set	4051
    92  0000                     _PORTDbits	set	3971
    93  0000                     _GIE	set	32663
    94                           
    95                           ; #config settings
    96  0000                     
    97                           	psect	cinit
    98  0000'                    __pcinit:
    99                           	opt stack 0
   100  0000'                    start_initialization:
   101                           	opt stack 0
   102  0000'                    __initialization:
   103                           	opt stack 0
   104                           
   105                           ; Initialize objects allocated to COMRAM (4 bytes)
   106                           ; load TBLPTR registers with __pidataCOMRAM
   107  0000' 0E00'              	movlw	low __pidataCOMRAM
   108  0002' 6EF6               	movwf	tblptrl,c
   109  0004' 0E00'              	movlw	high __pidataCOMRAM
   110  0006' 6EF7               	movwf	tblptrh,c
   111  0008' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   112  000A' 6EF8               	movwf	tblptru,c
   113  000C' EE00' F000'        	lfsr	0,__pdataCOMRAM
   114  0010' EE10 F004          	lfsr	1,4
   115  0014'                    copy_data0:
   116  0014' 0009               	tblrd		*+
   117  0016' CFF5 FFEE          	movff	tablat,postinc0
   118  001A' 50E5               	movf	postdec1,w,c
   119  001C' 50E1               	movf	fsr1l,w,c
   120  001E' E1FA               	bnz	copy_data0
   121                           
   122                           ; Clear objects allocated to COMRAM (11 bytes)
   123  0020' EE00' F000'        	lfsr	0,__pbssCOMRAM
   124  0024' 0E0B               	movlw	11
   125  0026'                    clear_0:
   126  0026' 6AEE               	clrf	postinc0,c
   127  0028' 06E8               	decf	wreg,f,c
   128  002A' E1FD               	bnz	clear_0
   129  002C'                    end_of_initialization:
   130                           	opt stack 0
   131  002C'                    __end_of__initialization:
   132                           	opt stack 0
   133  002C' 0100               	movlb	0
   134  002E' EF00' F000'        	goto	_main	;jump to C main() function
   135                           tblptru	equ	0xFF8
   136                           tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           postdec1	equ	0xFE5
   142                           fsr1l	equ	0xFE1
   143                           
   144                           	psect	bssCOMRAM
   145  0000'                    __pbssCOMRAM:
   146                           	opt stack 0
   147  0000'                    _temp:
   148                           	opt stack 0
   149  0000'                    	ds	4
   150  0004'                    _led:
   151                           	opt stack 0
   152  0004'                    	ds	3
   153  0007'                    _isFlow:
   154                           	opt stack 0
   155  0007'                    	ds	2
   156  0009'                    _flag:
   157                           	opt stack 0
   158  0009'                    	ds	2
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           tblptrl	equ	0xFF6
   162                           tablat	equ	0xFF5
   163                           postinc0	equ	0xFEE
   164                           wreg	equ	0xFE8
   165                           postdec1	equ	0xFE5
   166                           fsr1l	equ	0xFE1
   167                           
   168                           	psect	dataCOMRAM
   169  0000'                    __pdataCOMRAM:
   170                           	opt stack 0
   171  0000'                    _randx:
   172                           	opt stack 0
   173  0000'                    	ds	4
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           postdec1	equ	0xFE5
   181                           fsr1l	equ	0xFE1
   182                           
   183                           	psect	cstackCOMRAM
   184  0000'                    __pcstackCOMRAM:
   185                           	opt stack 0
   186  0000'                    ?___wmul:
   187                           	opt stack 0
   188  0000'                    ?_time:
   189  0000'                    ?_bitflip:
   190                           	opt stack 0
   191  0000'                    ?___lmul:
   192                           	opt stack 0
   193  0000'                    _time$0:
   194                           	opt stack 0
   195  0000'                    ___wmul@multiplier:
   196                           	opt stack 0
   197  0000'                    srand@x:
   198                           	opt stack 0
   199  0000'                    ___lmul@multiplier:
   200                           	opt stack 0
   201                           
   202                           ; 4 bytes @ 0x0
   203  0000'                    	ds	2
   204  0002'                    ___wmul@multiplicand:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x2
   208  0002'                    	ds	2
   209  0004'                    ??_bitflip:
   210  0004'                    ___wmul@product:
   211                           	opt stack 0
   212  0004'                    ___lmul@multiplicand:
   213                           	opt stack 0
   214                           
   215                           ; 4 bytes @ 0x4
   216  0004'                    	ds	2
   217  0006'                    bitflip@b:
   218                           	opt stack 0
   219                           
   220                           ; 1 bytes @ 0x6
   221  0006'                    	ds	2
   222  0008'                    ___lmul@product:
   223                           	opt stack 0
   224                           
   225                           ; 4 bytes @ 0x8
   226  0008'                    	ds	4
   227  000C'                    ?_rand:
   228                           	opt stack 0
   229  000C'                    led_send@front:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0xC
   233  000C'                    	ds	2
   234  000E'                    ??_led_send:
   235                           
   236                           ; 1 bytes @ 0xE
   237  000E'                    	ds	5
   238  0013'                    led_send@front_24:
   239                           	opt stack 0
   240                           
   241                           ; 4 bytes @ 0x13
   242  0013'                    	ds	4
   243  0017'                    led_send@back_24:
   244                           	opt stack 0
   245                           
   246                           ; 4 bytes @ 0x17
   247  0017'                    	ds	4
   248  001B'                    led_send@i:
   249                           	opt stack 0
   250                           
   251                           ; 4 bytes @ 0x1B
   252  001B'                    	ds	4
   253  001F'                    led_send@val:
   254                           	opt stack 0
   255                           
   256                           ; 4 bytes @ 0x1F
   257  001F'                    	ds	4
   258  0023'                    led_send@buf:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x23
   262  0023'                    	ds	2
   263  0025'                    ??_main:
   264                           
   265                           ; 1 bytes @ 0x25
   266  0025'                    	ds	5
   267  002A'                    main@k:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x2A
   271  002A'                    	ds	2
   272  002C'                    main@l:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x2C
   276  002C'                    	ds	2
   277  002E'                    main@front:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x2E
   281  002E'                    	ds	2
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291 ;;
   292 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   293 ;;
   294 ;; *************** function _main *****************
   295 ;; Defined at:
   296 ;;		line 133 in file "hehe.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;  l               2   44[COMRAM] int 
   301 ;;  k               2   42[COMRAM] int 
   302 ;;  front           2   46[COMRAM] int 
   303 ;; Return value:  Size  Location     Type
   304 ;;                  1    wreg      void 
   305 ;; Registers used:
   306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   307 ;; Tracked objects:
   308 ;;		On entry : 0/0
   309 ;;		On exit  : 0/0
   310 ;;		Unchanged: 0/0
   311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   312 ;;      Params:         0       0       0       0       0       0       0
   313 ;;      Locals:         6       0       0       0       0       0       0
   314 ;;      Temps:          5       0       0       0       0       0       0
   315 ;;      Totals:        11       0       0       0       0       0       0
   316 ;;Total ram usage:       11 bytes
   317 ;; Hardware stack levels required when called:    2
   318 ;; This function calls:
   319 ;;		___wmul
   320 ;;		_bitflip
   321 ;;		_init
   322 ;;		_led_send
   323 ;;		_rand
   324 ;; This function is called by:
   325 ;;		Startup code after reset
   326 ;; This function uses a non-reentrant model
   327 ;;
   328                           
   329                           	psect	text0
   330  0000'                    __ptext0:
   331                           	opt stack 0
   332  0000'                    _main:
   333                           	opt stack 29
   334                           
   335                           ;hehe.c: 134: init();
   336                           
   337                           ;incstack = 0
   338  0000' EC00' F000'        	call	_init	;wreg free
   339                           
   340                           ;hehe.c: 135: tmp1=bitflip(led.g);
   341  0004' 5006'              	movf	_led+2,w,c
   342  0006' EC00' F000'        	call	_bitflip
   343  000A' 5000'              	movf	?_bitflip,w,c
   344  000C' 6E0E'              	movwf	_tmp1,c
   345                           
   346                           ;hehe.c: 136: tmp2=bitflip(led.r);
   347  000E' 5004'              	movf	_led,w,c
   348  0010' EC00' F000'        	call	_bitflip
   349  0014' 5000'              	movf	?_bitflip,w,c
   350  0016' 6E0D'              	movwf	_tmp2,c
   351                           
   352                           ;hehe.c: 137: tmp3=bitflip(led.b);
   353  0018' 5005'              	movf	_led+1,w,c
   354  001A' EC00' F000'        	call	_bitflip
   355  001E' 5000'              	movf	?_bitflip,w,c
   356  0020' 6E0C'              	movwf	_tmp3,c
   357                           
   358                           ;hehe.c: 139: int front = 0;
   359  0022' 0E00               	movlw	0
   360  0024' 6E2F'              	movwf	main@front+1,c
   361  0026' 0E00               	movlw	0
   362  0028' 6E2E'              	movwf	main@front,c
   363  002A'                    l64:
   364  002A' 0004               	clrwdt		;# 
   365                           
   366                           ;hehe.c: 143: led.r = rand();
   367  002C' EC00' F000'        	call	_rand	;wreg free
   368  0030' 500C'              	movf	?_rand,w,c
   369  0032' 6E04'              	movwf	_led,c
   370                           
   371                           ;hehe.c: 144: led.g = rand();
   372  0034' EC00' F000'        	call	_rand	;wreg free
   373  0038' 500C'              	movf	?_rand,w,c
   374  003A' 6E06'              	movwf	_led+2,c
   375                           
   376                           ;hehe.c: 145: led.b = rand();
   377  003C' EC00' F000'        	call	_rand	;wreg free
   378  0040' 500C'              	movf	?_rand,w,c
   379  0042' 6E05'              	movwf	_led+1,c
   380                           
   381                           ;hehe.c: 146: tmp1=bitflip(led.g);
   382  0044' 5006'              	movf	_led+2,w,c
   383  0046' EC00' F000'        	call	_bitflip
   384  004A' 5000'              	movf	?_bitflip,w,c
   385  004C' 6E0E'              	movwf	_tmp1,c
   386                           
   387                           ;hehe.c: 147: tmp2=bitflip(led.r);
   388  004E' 5004'              	movf	_led,w,c
   389  0050' EC00' F000'        	call	_bitflip
   390  0054' 5000'              	movf	?_bitflip,w,c
   391  0056' 6E0D'              	movwf	_tmp2,c
   392                           
   393                           ;hehe.c: 148: tmp3=bitflip(led.b);
   394  0058' 5005'              	movf	_led+1,w,c
   395  005A' EC00' F000'        	call	_bitflip
   396  005E' 5000'              	movf	?_bitflip,w,c
   397  0060' 6E0C'              	movwf	_tmp3,c
   398                           
   399                           ;hehe.c: 149: GIE = 0; while (GIE);
   400  0062' 9EF2               	bcf	intcon,7,c	;volatile
   401  0064' BEF2               	btfsc	intcon,7,c	;volatile
   402  0066' D7FE               	goto	l66
   403                           
   404                           ;hehe.c: 150: if(front > ledlength)
   405  0068' C02E' F025'        	movff	main@front,??_main
   406  006C' C02F' F026'        	movff	main@front+1,??_main+1
   407  0070' 0E00               	movlw	0
   408  0072' BE00'              	btfsc	(??_main+1)& (0+255),7,c
   409  0074' 0EFF               	movlw	255
   410  0076' 6E00'              	movwf	(??_main+2)& (0+255),c
   411  0078' 6E00'              	movwf	(??_main+3)& (0+255),c
   412  007A' 5025'              	movf	??_main,w,c
   413  007C' 5C04'              	subwf	_ledlength,w,c
   414  007E' 5026'              	movf	??_main+1,w,c
   415  0080' 5805'              	subwfb	_ledlength+1,w,c
   416  0082' 5027'              	movf	??_main+2,w,c
   417  0084' 5806'              	subwfb	_ledlength+2,w,c
   418  0086' 5007'              	movf	_ledlength+3,w,c
   419  0088' 0A80               	xorlw	128
   420  008A' 6E00'              	movwf	(??_main+4)& (0+255),c
   421  008C' 5028'              	movf	??_main+3,w,c
   422  008E' 0A80               	xorlw	128
   423  0090' 5800'              	subwfb	(??_main+4)& (0+255),w,c
   424  0092' B0D8               	btfsc	status,0,c
   425  0094' D01F               	goto	l68
   426                           
   427                           ;hehe.c: 151: {
   428                           ;hehe.c: 152: front=0;
   429  0096' 0E00               	movlw	0
   430  0098' 6E2F'              	movwf	main@front+1,c
   431  009A' 0E00               	movlw	0
   432  009C' 6E2E'              	movwf	main@front,c
   433                           
   434                           ;hehe.c: 153: isFlow=0;
   435  009E' 0E00               	movlw	0
   436  00A0' 6E08'              	movwf	_isFlow+1,c
   437  00A2' 0E00               	movlw	0
   438  00A4' 6E07'              	movwf	_isFlow,c
   439                           
   440                           ;hehe.c: 154: lednum=1;
   441  00A6' 0E00               	movlw	0
   442  00A8' 6E0B'              	movwf	_lednum+1,c
   443  00AA' 0E01               	movlw	1
   444  00AC' 6E0A'              	movwf	_lednum,c
   445                           
   446                           ;hehe.c: 155: lednum_24= lednum*24;
   447  00AE' C00A' F000'        	movff	_lednum,___wmul@multiplier
   448  00B2' C00B' F001'        	movff	_lednum+1,___wmul@multiplier+1
   449  00B6' 0E00               	movlw	0
   450  00B8' 6E03'              	movwf	___wmul@multiplicand+1,c
   451  00BA' 0E18               	movlw	24
   452  00BC' 6E02'              	movwf	___wmul@multiplicand,c
   453  00BE' EC00' F000'        	call	___wmul	;wreg free
   454  00C2' C000' F000'        	movff	?___wmul,_lednum_24
   455  00C6' C001' F001'        	movff	?___wmul+1,_lednum_24+1
   456  00CA' 0E00               	movlw	0
   457  00CC' BE01'              	btfsc	_lednum_24+1,7,c
   458  00CE' 0EFF               	movlw	-1
   459  00D0' 6E02'              	movwf	_lednum_24+2,c
   460  00D2' 6E03'              	movwf	_lednum_24+3,c
   461  00D4'                    l68:
   462                           
   463                           ;hehe.c: 156: }
   464                           ;hehe.c: 157: led_send(front);
   465  00D4' C02E' F00C'        	movff	main@front,led_send@front
   466  00D8' C02F' F00D'        	movff	main@front+1,led_send@front+1
   467  00DC' EC00' F000'        	call	_led_send	;wreg free
   468                           
   469                           ;hehe.c: 158: if(isFlow){
   470  00E0' 5007'              	movf	_isFlow,w,c
   471  00E2' 1008'              	iorwf	_isFlow+1,w,c
   472  00E4' B4D8               	btfsc	status,2,c
   473  00E6' D002               	goto	l69
   474                           
   475                           ;hehe.c: 159: front++;
   476  00E8' 4A2E'              	infsnz	main@front,f,c
   477  00EA' 2A2F'              	incf	main@front+1,f,c
   478  00EC'                    l69:
   479                           
   480                           ;hehe.c: 160: }
   481                           ;hehe.c: 161: if(lednum!=ledmax)
   482  00EC' 5008'              	movf	_ledmax,w,c
   483  00EE' 180A'              	xorwf	_lednum,w,c
   484  00F0' E104               	bnz	u260
   485  00F2' 5009'              	movf	_ledmax+1,w,c
   486  00F4' 180B'              	xorwf	_lednum+1,w,c
   487  00F6' B4D8               	btfsc	status,2,c
   488  00F8' D015               	goto	l70
   489  00FA'                    u260:
   490                           
   491                           ;hehe.c: 162: {
   492                           ;hehe.c: 163: lednum++;
   493  00FA' 4A0A'              	infsnz	_lednum,f,c
   494  00FC' 2A0B'              	incf	_lednum+1,f,c
   495                           
   496                           ;hehe.c: 164: lednum_24= lednum*24;
   497  00FE' C00A' F000'        	movff	_lednum,___wmul@multiplier
   498  0102' C00B' F001'        	movff	_lednum+1,___wmul@multiplier+1
   499  0106' 0E00               	movlw	0
   500  0108' 6E03'              	movwf	___wmul@multiplicand+1,c
   501  010A' 0E18               	movlw	24
   502  010C' 6E02'              	movwf	___wmul@multiplicand,c
   503  010E' EC00' F000'        	call	___wmul	;wreg free
   504  0112' C000' F000'        	movff	?___wmul,_lednum_24
   505  0116' C001' F001'        	movff	?___wmul+1,_lednum_24+1
   506  011A' 0E00               	movlw	0
   507  011C' BE01'              	btfsc	_lednum_24+1,7,c
   508  011E' 0EFF               	movlw	-1
   509  0120' 6E02'              	movwf	_lednum_24+2,c
   510  0122' 6E03'              	movwf	_lednum_24+3,c
   511  0124'                    l70:
   512                           
   513                           ;hehe.c: 165: }
   514                           ;hehe.c: 166: if(lednum==ledmax)
   515  0124' 5008'              	movf	_ledmax,w,c
   516  0126' 180A'              	xorwf	_lednum,w,c
   517  0128' E108               	bnz	l71
   518  012A' 5009'              	movf	_ledmax+1,w,c
   519  012C' 180B'              	xorwf	_lednum+1,w,c
   520  012E' A4D8               	btfss	status,2,c
   521  0130' D004               	goto	l71
   522                           
   523                           ;hehe.c: 167: {
   524                           ;hehe.c: 168: isFlow=1;
   525  0132' 0E00               	movlw	0
   526  0134' 6E08'              	movwf	_isFlow+1,c
   527  0136' 0E01               	movlw	1
   528  0138' 6E07'              	movwf	_isFlow,c
   529  013A'                    l71:
   530                           
   531                           ;hehe.c: 169: }
   532                           ;hehe.c: 171: int k = 1 , l = 5;
   533  013A' 0E00               	movlw	0
   534  013C' 6E2B'              	movwf	main@k+1,c
   535  013E' 0E01               	movlw	1
   536  0140' 6E2A'              	movwf	main@k,c
   537  0142' 0E00               	movlw	0
   538  0144' 6E2D'              	movwf	main@l+1,c
   539  0146' 0E05               	movlw	5
   540  0148' 6E2C'              	movwf	main@l,c
   541                           
   542                           ;hehe.c: 172: while( k > 0 ) {
   543  014A' D012               	goto	l72
   544  014C'                    l991:
   545                           
   546                           ;hehe.c: 173: l = 5;
   547  014C' 0E00               	movlw	0
   548  014E' 6E2D'              	movwf	main@l+1,c
   549  0150' 0E05               	movlw	5
   550  0152' 6E2C'              	movwf	main@l,c
   551                           
   552                           ;hehe.c: 174: while( l > 0) {
   553  0154' D003               	goto	l74
   554  0156'                    l993:
   555                           
   556                           ;hehe.c: 175: l--;
   557  0156' 062C'              	decf	main@l,f,c
   558  0158' A0D8               	btfss	status,0,c
   559  015A' 062D'              	decf	main@l+1,f,c
   560  015C'                    l74:
   561  015C' BE2D'              	btfsc	main@l+1,7,c
   562  015E' D005               	goto	u280
   563  0160' 502D'              	movf	main@l+1,w,c
   564  0162' E1F9               	bnz	l993
   565  0164' 042C'              	decf	main@l,w,c
   566  0166' B0D8               	btfsc	status,0,c
   567  0168' D7F6               	goto	l75
   568  016A'                    u280:
   569                           
   570                           ;hehe.c: 176: }
   571                           ;hehe.c: 177: k--;
   572  016A' 062A'              	decf	main@k,f,c
   573  016C' A0D8               	btfss	status,0,c
   574  016E' 062B'              	decf	main@k+1,f,c
   575  0170'                    l72:
   576  0170' BE2B'              	btfsc	main@k+1,7,c
   577  0172' D005               	goto	u290
   578  0174' 502B'              	movf	main@k+1,w,c
   579  0176' E1EA               	bnz	l991
   580  0178' 042A'              	decf	main@k,w,c
   581  017A' B0D8               	btfsc	status,0,c
   582  017C' D7E7               	goto	l73
   583  017E'                    u290:
   584                           
   585                           ;hehe.c: 178: }
   586                           ;hehe.c: 180: GIE = 1; while (!GIE);
   587  017E' 8EF2               	bsf	intcon,7,c	;volatile
   588  0180' BEF2               	btfsc	intcon,7,c	;volatile
   589  0182' D753               	goto	l64
   590  0184' D7FD               	goto	l79
   591  0186'                    __end_of_main:
   592                           	opt stack 0
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           intcon	equ	0xFF2
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           status	equ	0xFD8
   603                           
   604 ;; *************** function _rand *****************
   605 ;; Defined at:
   606 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\rand.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  2   12[COMRAM] int 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         2       0       0       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0
   623 ;;      Totals:         2       0       0       0       0       0       0
   624 ;;Total ram usage:        2 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    1
   627 ;; This function calls:
   628 ;;		___lmul
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text1
   635  0000'                    __ptext1:
   636                           	opt stack 0
   637  0000'                    _rand:
   638                           	opt stack 29
   639                           
   640                           ;incstack = 0
   641  0000' C000' F000'        	movff	_randx,___lmul@multiplier
   642  0004' C001' F001'        	movff	_randx+1,___lmul@multiplier+1
   643  0008' C002' F002'        	movff	_randx+2,___lmul@multiplier+2
   644  000C' C003' F003'        	movff	_randx+3,___lmul@multiplier+3
   645  0010' 0E6D               	movlw	109
   646  0012' 6E04'              	movwf	___lmul@multiplicand,c
   647  0014' 0E4E               	movlw	78
   648  0016' 6E05'              	movwf	___lmul@multiplicand+1,c
   649  0018' 0EC6               	movlw	198
   650  001A' 6E06'              	movwf	___lmul@multiplicand+2,c
   651  001C' 0E41               	movlw	65
   652  001E' 6E07'              	movwf	___lmul@multiplicand+3,c
   653  0020' EC00' F000'        	call	___lmul	;wreg free
   654  0024' C000' F000'        	movff	?___lmul,_randx
   655  0028' C001' F001'        	movff	?___lmul+1,_randx+1
   656  002C' C002' F002'        	movff	?___lmul+2,_randx+2
   657  0030' C003' F003'        	movff	?___lmul+3,_randx+3
   658  0034' 0E39               	movlw	57
   659  0036' 2600'              	addwf	_randx,f,c
   660  0038' 0E30               	movlw	48
   661  003A' 2201'              	addwfc	_randx+1,f,c
   662  003C' 0E00               	movlw	0
   663  003E' 2202'              	addwfc	_randx+2,f,c
   664  0040' 0E00               	movlw	0
   665  0042' 2203'              	addwfc	_randx+3,f,c
   666  0044' 0EFF               	movlw	255
   667  0046' 1402'              	andwf	_randx+2,w,c
   668  0048' 6E0C'              	movwf	?_rand,c
   669  004A' 0E7F               	movlw	127
   670  004C' 1403'              	andwf	_randx+3,w,c
   671  004E' 6E0D'              	movwf	?_rand+1,c
   672  0050' 0012               	return	
   673  0052'                    __end_of_rand:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           intcon	equ	0xFF2
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postdec1	equ	0xFE5
   683                           fsr1l	equ	0xFE1
   684                           status	equ	0xFD8
   685                           
   686 ;; *************** function _led_send *****************
   687 ;; Defined at:
   688 ;;		line 37 in file "hehe.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  front           2   12[COMRAM] int 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  i               4   27[COMRAM] long 
   693 ;;  val             4   31[COMRAM] long 
   694 ;;  back_24         4   23[COMRAM] long 
   695 ;;  front_24        4   19[COMRAM] long 
   696 ;;  buf             2   35[COMRAM] int 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   706 ;;      Params:         2       0       0       0       0       0       0
   707 ;;      Locals:        18       0       0       0       0       0       0
   708 ;;      Temps:          5       0       0       0       0       0       0
   709 ;;      Totals:        25       0       0       0       0       0       0
   710 ;;Total ram usage:       25 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; Hardware stack levels required when called:    1
   713 ;; This function calls:
   714 ;;		___lmul
   715 ;;		___wmul
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text2
   722  0000'                    __ptext2:
   723                           	opt stack 0
   724  0000'                    _led_send:
   725                           	opt stack 29
   726                           
   727                           ;hehe.c: 38: long int front_24 = front * 24;
   728                           
   729                           ;incstack = 0
   730  0000' C00C' F000'        	movff	led_send@front,___wmul@multiplier
   731  0004' C00D' F001'        	movff	led_send@front+1,___wmul@multiplier+1
   732  0008' 0E00               	movlw	0
   733  000A' 6E03'              	movwf	___wmul@multiplicand+1,c
   734  000C' 0E18               	movlw	24
   735  000E' 6E02'              	movwf	___wmul@multiplicand,c
   736  0010' EC00' F000'        	call	___wmul	;wreg free
   737  0014' C000' F013'        	movff	?___wmul,led_send@front_24
   738  0018' C001' F014'        	movff	?___wmul+1,led_send@front_24+1
   739  001C' 0E00               	movlw	0
   740  001E' BE14'              	btfsc	led_send@front_24+1,7,c
   741  0020' 0EFF               	movlw	-1
   742  0022' 6E15'              	movwf	led_send@front_24+2,c
   743  0024' 6E16'              	movwf	led_send@front_24+3,c
   744                           
   745                           ;hehe.c: 39: int buf = 24;
   746  0026' 0E00               	movlw	0
   747  0028' 6E24'              	movwf	led_send@buf+1,c
   748  002A' 0E18               	movlw	24
   749  002C' 6E23'              	movwf	led_send@buf,c
   750                           
   751                           ;hehe.c: 40: long int val = (long int)tmp1;
   752  002E' 500E'              	movf	_tmp1,w,c
   753  0030' 6E1F'              	movwf	led_send@val,c
   754  0032' 6A20'              	clrf	led_send@val+1,c
   755  0034' 6A21'              	clrf	led_send@val+2,c
   756  0036' 6A22'              	clrf	led_send@val+3,c
   757                           
   758                           ;hehe.c: 41: long int back_24 = (ledlength - front ) * 24;
   759  0038' C00C' F00E'        	movff	led_send@front,??_led_send
   760  003C' C00D' F00F'        	movff	led_send@front+1,??_led_send+1
   761  0040' 0E00               	movlw	0
   762  0042' BE00'              	btfsc	(??_led_send+1)& (0+255),7,c
   763  0044' 0EFF               	movlw	255
   764  0046' 6E00'              	movwf	(??_led_send+2)& (0+255),c
   765  0048' 6E00'              	movwf	(??_led_send+3)& (0+255),c
   766  004A' 1E0E'              	comf	??_led_send,f,c
   767  004C' 1E0F'              	comf	??_led_send+1,f,c
   768  004E' 1E10'              	comf	??_led_send+2,f,c
   769  0050' 1E11'              	comf	??_led_send+3,f,c
   770  0052' 2A0E'              	incf	??_led_send,f,c
   771  0054' 0E00               	movlw	0
   772  0056' 220F'              	addwfc	??_led_send+1,f,c
   773  0058' 2210'              	addwfc	??_led_send+2,f,c
   774  005A' 2211'              	addwfc	??_led_send+3,f,c
   775  005C' 5004'              	movf	_ledlength,w,c
   776  005E' 240E'              	addwf	??_led_send,w,c
   777  0060' 6E00'              	movwf	___lmul@multiplier,c
   778  0062' 5005'              	movf	_ledlength+1,w,c
   779  0064' 200F'              	addwfc	??_led_send+1,w,c
   780  0066' 6E01'              	movwf	___lmul@multiplier+1,c
   781  0068' 5006'              	movf	_ledlength+2,w,c
   782  006A' 2010'              	addwfc	??_led_send+2,w,c
   783  006C' 6E02'              	movwf	___lmul@multiplier+2,c
   784  006E' 5007'              	movf	_ledlength+3,w,c
   785  0070' 2011'              	addwfc	??_led_send+3,w,c
   786  0072' 6E03'              	movwf	___lmul@multiplier+3,c
   787  0074' 0E18               	movlw	24
   788  0076' 6E04'              	movwf	___lmul@multiplicand,c
   789  0078' 0E00               	movlw	0
   790  007A' 6E05'              	movwf	___lmul@multiplicand+1,c
   791  007C' 0E00               	movlw	0
   792  007E' 6E06'              	movwf	___lmul@multiplicand+2,c
   793  0080' 0E00               	movlw	0
   794  0082' 6E07'              	movwf	___lmul@multiplicand+3,c
   795  0084' EC00' F000'        	call	___lmul	;wreg free
   796  0088' C000' F017'        	movff	?___lmul,led_send@back_24
   797  008C' C001' F018'        	movff	?___lmul+1,led_send@back_24+1
   798  0090' C002' F019'        	movff	?___lmul+2,led_send@back_24+2
   799  0094' C003' F01A'        	movff	?___lmul+3,led_send@back_24+3
   800                           
   801                           ;hehe.c: 54: for(long int i = 0; i < ledmax*24 ; i++ ){
   802  0098' 0E00               	movlw	0
   803  009A' 6E1B'              	movwf	led_send@i,c
   804  009C' 0E00               	movlw	0
   805  009E' 6E1C'              	movwf	led_send@i+1,c
   806  00A0' 0E00               	movlw	0
   807  00A2' 6E1D'              	movwf	led_send@i+2,c
   808  00A4' 0E00               	movlw	0
   809  00A6' 6E1E'              	movwf	led_send@i+3,c
   810  00A8' D03C               	goto	l43
   811  00AA'                    
   812                           ;hehe.c: 56: if(buf== 0){
   813  00AA' 5023'              	movf	led_send@buf,w,c
   814  00AC' 1024'              	iorwf	led_send@buf+1,w,c
   815  00AE' A4D8               	btfss	status,2,c
   816  00B0' D006               	goto	l45
   817                           
   818                           ;hehe.c: 57: buf = 24;
   819  00B2' 0E00               	movlw	0
   820  00B4' 6E24'              	movwf	led_send@buf+1,c
   821  00B6' 0E18               	movlw	24
   822  00B8' 6E23'              	movwf	led_send@buf,c
   823                           
   824                           ;hehe.c: 58: val = (long int)tmp1;
   825  00BA' 500E'              	movf	_tmp1,w,c
   826  00BC' D00D               	goto	L2
   827  00BE'                    l45:
   828                           
   829                           ;hehe.c: 60: else if(buf== 16){
   830  00BE' 0E10               	movlw	16
   831  00C0' 1823'              	xorwf	led_send@buf,w,c
   832  00C2' 1024'              	iorwf	led_send@buf+1,w,c
   833  00C4' A4D8               	btfss	status,2,c
   834  00C6' D002               	goto	l47
   835                           
   836                           ;hehe.c: 62: val = (long int)tmp2;
   837  00C8' 500D'              	movf	_tmp2,w,c
   838  00CA' D006               	goto	L2
   839  00CC'                    l47:
   840                           
   841                           ;hehe.c: 64: else if(buf== 8){
   842  00CC' 0E08               	movlw	8
   843  00CE' 1823'              	xorwf	led_send@buf,w,c
   844  00D0' 1024'              	iorwf	led_send@buf+1,w,c
   845  00D2' A4D8               	btfss	status,2,c
   846  00D4' D005               	goto	l49
   847                           
   848                           ;hehe.c: 65: val = (long int)tmp3;
   849  00D6' 500C'              	movf	_tmp3,w,c
   850  00D8'                    L2:
   851  00D8' 6E1F'              	movwf	led_send@val,c
   852  00DA' 6A20'              	clrf	led_send@val+1,c
   853  00DC' 6A21'              	clrf	led_send@val+2,c
   854  00DE' 6A22'              	clrf	led_send@val+3,c
   855  00E0'                    l49:
   856                           
   857                           ;hehe.c: 66: }
   858                           ;hehe.c: 68: if (val & 1) {
   859  00E0' A01F'              	btfss	led_send@val,0,c
   860  00E2' D009               	goto	l50
   861                           
   862                           ;hehe.c: 69: PORTDbits.RD0 = 1;
   863  00E4' 8083               	bsf	3971,0,c	;volatile
   864                           
   865                           ;hehe.c: 70: __nop();
   866  00E6' F000               	nop	
   867                           
   868                           ;hehe.c: 71: __nop();
   869  00E8' F000               	nop	
   870                           
   871                           ;hehe.c: 72: __nop();
   872  00EA' F000               	nop	
   873                           
   874                           ;hehe.c: 73: __nop();
   875  00EC' F000               	nop	
   876                           
   877                           ;hehe.c: 74: __nop();
   878  00EE' F000               	nop	
   879                           
   880                           ;hehe.c: 75: __nop();
   881  00F0' F000               	nop	
   882                           
   883                           ;hehe.c: 76: PORTDbits.RD0 = 0;
   884  00F2' 9083               	bcf	3971,0,c	;volatile
   885                           
   886                           ;hehe.c: 78: } else {
   887  00F4' D008               	goto	l51
   888  00F6'                    l50:
   889                           
   890                           ;hehe.c: 79: PORTDbits.RD0 = 1;
   891  00F6' 8083               	bsf	3971,0,c	;volatile
   892                           
   893                           ;hehe.c: 80: PORTDbits.RD0 = 0;
   894  00F8' 9083               	bcf	3971,0,c	;volatile
   895                           
   896                           ;hehe.c: 81: __nop();
   897  00FA' F000               	nop	
   898                           
   899                           ;hehe.c: 82: __nop();
   900  00FC' F000               	nop	
   901                           
   902                           ;hehe.c: 83: __nop();
   903  00FE' F000               	nop	
   904                           
   905                           ;hehe.c: 84: __nop();
   906  0100' F000               	nop	
   907                           
   908                           ;hehe.c: 85: __nop();
   909  0102' F000               	nop	
   910                           
   911                           ;hehe.c: 86: __nop();
   912  0104' F000               	nop	
   913  0106'                    l51:
   914                           
   915                           ;hehe.c: 87: }
   916                           ;hehe.c: 88: val >>= (unsigned char)1;
   917  0106' 3422'              	rlcf	led_send@val+3,w,c
   918  0108' 3222'              	rrcf	led_send@val+3,f,c
   919  010A' 3221'              	rrcf	led_send@val+2,f,c
   920  010C' 3220'              	rrcf	led_send@val+1,f,c
   921  010E' 321F'              	rrcf	led_send@val,f,c
   922                           
   923                           ;hehe.c: 89: buf--;
   924  0110' 0623'              	decf	led_send@buf,f,c
   925  0112' A0D8               	btfss	status,0,c
   926  0114' 0624'              	decf	led_send@buf+1,f,c
   927  0116' 0E01               	movlw	1
   928  0118' 261B'              	addwf	led_send@i,f,c
   929  011A' 0E00               	movlw	0
   930  011C' 221C'              	addwfc	led_send@i+1,f,c
   931  011E' 221D'              	addwfc	led_send@i+2,f,c
   932  0120' 221E'              	addwfc	led_send@i+3,f,c
   933  0122'                    l43:
   934  0122' C008' F000'        	movff	_ledmax,___wmul@multiplier
   935  0126' C009' F001'        	movff	_ledmax+1,___wmul@multiplier+1
   936  012A' 0E00               	movlw	0
   937  012C' 6E03'              	movwf	___wmul@multiplicand+1,c
   938  012E' 0E18               	movlw	24
   939  0130' 6E02'              	movwf	___wmul@multiplicand,c
   940  0132' EC00' F000'        	call	___wmul	;wreg free
   941  0136' C000' F00E'        	movff	?___wmul,??_led_send
   942  013A' C001' F00F'        	movff	?___wmul+1,??_led_send+1
   943  013E' 0E00               	movlw	0
   944  0140' BE00'              	btfsc	(??_led_send+1)& (0+255),7,c
   945  0142' 0EFF               	movlw	255
   946  0144' 6E00'              	movwf	(??_led_send+2)& (0+255),c
   947  0146' 6E00'              	movwf	(??_led_send+3)& (0+255),c
   948  0148' 500E'              	movf	??_led_send,w,c
   949  014A' 5C1B'              	subwf	led_send@i,w,c
   950  014C' 500F'              	movf	??_led_send+1,w,c
   951  014E' 581C'              	subwfb	led_send@i+1,w,c
   952  0150' 5010'              	movf	??_led_send+2,w,c
   953  0152' 581D'              	subwfb	led_send@i+2,w,c
   954  0154' 501E'              	movf	led_send@i+3,w,c
   955  0156' 0A80               	xorlw	128
   956  0158' 6E00'              	movwf	(??_led_send+4)& (0+255),c
   957  015A' 5011'              	movf	??_led_send+3,w,c
   958  015C' 0A80               	xorlw	128
   959  015E' 5800'              	subwfb	(??_led_send+4)& (0+255),w,c
   960  0160' B0D8               	btfsc	status,0,c
   961  0162' 0012               	return	
   962  0164' D7A2               	goto	l44
   963  0166'                    __end_of_led_send:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           intcon	equ	0xFF2
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           postdec1	equ	0xFE5
   973                           fsr1l	equ	0xFE1
   974                           status	equ	0xFD8
   975                           
   976 ;; *************** function ___lmul *****************
   977 ;; Defined at:
   978 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  multiplier      4    0[COMRAM] unsigned long 
   981 ;;  multiplicand    4    4[COMRAM] unsigned long 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  product         4    8[COMRAM] unsigned long 
   984 ;; Return value:  Size  Location     Type
   985 ;;                  4    0[COMRAM] unsigned long 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   993 ;;      Params:         8       0       0       0       0       0       0
   994 ;;      Locals:         4       0       0       0       0       0       0
   995 ;;      Temps:          0       0       0       0       0       0       0
   996 ;;      Totals:        12       0       0       0       0       0       0
   997 ;;Total ram usage:       12 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_led_send
  1003 ;;		_rand
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text3
  1008  0000'                    __ptext3:
  1009                           	opt stack 0
  1010  0000'                    ___lmul:
  1011                           	opt stack 29
  1012                           
  1013                           ;incstack = 0
  1014  0000' 0E00               	movlw	0
  1015  0002' 6E08'              	movwf	___lmul@product,c
  1016  0004' 0E00               	movlw	0
  1017  0006' 6E09'              	movwf	___lmul@product+1,c
  1018  0008' 0E00               	movlw	0
  1019  000A' 6E0A'              	movwf	___lmul@product+2,c
  1020  000C' 0E00               	movlw	0
  1021  000E' 6E0B'              	movwf	___lmul@product+3,c
  1022  0010' A000'              	btfss	___lmul@multiplier,0,c
  1023  0012' D008               	goto	l96
  1024  0014' 5004'              	movf	___lmul@multiplicand,w,c
  1025  0016' 2608'              	addwf	___lmul@product,f,c
  1026  0018' 5005'              	movf	___lmul@multiplicand+1,w,c
  1027  001A' 2209'              	addwfc	___lmul@product+1,f,c
  1028  001C' 5006'              	movf	___lmul@multiplicand+2,w,c
  1029  001E' 220A'              	addwfc	___lmul@product+2,f,c
  1030  0020' 5007'              	movf	___lmul@multiplicand+3,w,c
  1031  0022' 220B'              	addwfc	___lmul@product+3,f,c
  1032  0024'                    l96:
  1033  0024' 90D8               	bcf	status,0,c
  1034  0026' 3604'              	rlcf	___lmul@multiplicand,f,c
  1035  0028' 3605'              	rlcf	___lmul@multiplicand+1,f,c
  1036  002A' 3606'              	rlcf	___lmul@multiplicand+2,f,c
  1037  002C' 3607'              	rlcf	___lmul@multiplicand+3,f,c
  1038  002E' 90D8               	bcf	status,0,c
  1039  0030' 3203'              	rrcf	___lmul@multiplier+3,f,c
  1040  0032' 3202'              	rrcf	___lmul@multiplier+2,f,c
  1041  0034' 3201'              	rrcf	___lmul@multiplier+1,f,c
  1042  0036' 3200'              	rrcf	___lmul@multiplier,f,c
  1043  0038' 5000'              	movf	___lmul@multiplier,w,c
  1044  003A' 1001'              	iorwf	___lmul@multiplier+1,w,c
  1045  003C' 1002'              	iorwf	___lmul@multiplier+2,w,c
  1046  003E' 1003'              	iorwf	___lmul@multiplier+3,w,c
  1047  0040' A4D8               	btfss	status,2,c
  1048  0042' D7E6               	goto	l95
  1049  0044' C008' F000'        	movff	___lmul@product,?___lmul
  1050  0048' C009' F001'        	movff	___lmul@product+1,?___lmul+1
  1051  004C' C00A' F002'        	movff	___lmul@product+2,?___lmul+2
  1052  0050' C00B' F003'        	movff	___lmul@product+3,?___lmul+3
  1053  0054' 0012               	return		;funcret
  1054  0056'                    __end_of___lmul:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           intcon	equ	0xFF2
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           status	equ	0xFD8
  1066                           
  1067 ;; *************** function _init *****************
  1068 ;; Defined at:
  1069 ;;		line 112 in file "hehe.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1083 ;;      Params:         0       0       0       0       0       0       0
  1084 ;;      Locals:         0       0       0       0       0       0       0
  1085 ;;      Temps:          0       0       0       0       0       0       0
  1086 ;;      Totals:         0       0       0       0       0       0       0
  1087 ;;Total ram usage:        0 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    1
  1090 ;; This function calls:
  1091 ;;		___wmul
  1092 ;;		_srand
  1093 ;;		_time
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text4
  1100  0000'                    __ptext4:
  1101                           	opt stack 0
  1102  0000'                    _init:
  1103                           	opt stack 29
  1104                           
  1105                           ;hehe.c: 113: OSCCONbits.IRCF2 = 1;
  1106                           
  1107                           ;incstack = 0
  1108  0000' 8CD3               	bsf	4051,6,c	;volatile
  1109                           
  1110                           ;hehe.c: 114: OSCCONbits.IRCF1 = 1;
  1111  0002' 8AD3               	bsf	4051,5,c	;volatile
  1112                           
  1113                           ;hehe.c: 115: OSCCONbits.IRCF0 = 1;
  1114  0004' 88D3               	bsf	4051,4,c	;volatile
  1115                           
  1116                           ;hehe.c: 116: OSCTUNEbits.PLLEN=1;
  1117  0006' 8C9B               	bsf	3995,6,c	;volatile
  1118                           
  1119                           ;hehe.c: 118: srand(time((0)));
  1120  0008' 0E00               	movlw	0
  1121  000A' 6E00'              	movwf	_time$0,c
  1122  000C' 0E00               	movlw	0
  1123  000E' 6E01'              	movwf	_time$0+1,c
  1124  0010' EC00' F000'        	call	_time	;wreg free
  1125  0014' C000' F000'        	movff	?_time,srand@x
  1126  0018' C001' F001'        	movff	?_time+1,srand@x+1
  1127  001C' EC00' F000'        	call	_srand	;wreg free
  1128                           
  1129                           ;hehe.c: 119: ledlength=300;
  1130  0020' 0E2C               	movlw	44
  1131  0022' 6E04'              	movwf	_ledlength,c
  1132  0024' 0E01               	movlw	1
  1133  0026' 6E05'              	movwf	_ledlength+1,c
  1134  0028' 0E00               	movlw	0
  1135  002A' 6E06'              	movwf	_ledlength+2,c
  1136  002C' 0E00               	movlw	0
  1137  002E' 6E07'              	movwf	_ledlength+3,c
  1138                           
  1139                           ;hehe.c: 120: lednum=1;
  1140  0030' 0E00               	movlw	0
  1141  0032' 6E0B'              	movwf	_lednum+1,c
  1142  0034' 0E01               	movlw	1
  1143  0036' 6E0A'              	movwf	_lednum,c
  1144                           
  1145                           ;hehe.c: 121: lednum_24= lednum*24;
  1146  0038' C00A' F000'        	movff	_lednum,___wmul@multiplier
  1147  003C' C00B' F001'        	movff	_lednum+1,___wmul@multiplier+1
  1148  0040' 0E00               	movlw	0
  1149  0042' 6E03'              	movwf	___wmul@multiplicand+1,c
  1150  0044' 0E18               	movlw	24
  1151  0046' 6E02'              	movwf	___wmul@multiplicand,c
  1152  0048' EC00' F000'        	call	___wmul	;wreg free
  1153  004C' C000' F000'        	movff	?___wmul,_lednum_24
  1154  0050' C001' F001'        	movff	?___wmul+1,_lednum_24+1
  1155  0054' 0E00               	movlw	0
  1156  0056' BE01'              	btfsc	_lednum_24+1,7,c
  1157  0058' 0EFF               	movlw	-1
  1158  005A' 6E02'              	movwf	_lednum_24+2,c
  1159  005C' 6E03'              	movwf	_lednum_24+3,c
  1160                           
  1161                           ;hehe.c: 122: ledmax=300;
  1162  005E' 0E01               	movlw	1
  1163  0060' 6E09'              	movwf	_ledmax+1,c
  1164  0062' 0E2C               	movlw	44
  1165  0064' 6E08'              	movwf	_ledmax,c
  1166                           
  1167                           ;hehe.c: 124: led.r = 1;
  1168  0066' 0E01               	movlw	1
  1169  0068' 6E04'              	movwf	_led,c
  1170                           
  1171                           ;hehe.c: 125: led.g = 1;
  1172  006A' 0E01               	movlw	1
  1173  006C' 6E06'              	movwf	_led+2,c
  1174                           
  1175                           ;hehe.c: 126: led.b = 100;
  1176  006E' 0E64               	movlw	100
  1177  0070' 6E05'              	movwf	_led+1,c
  1178                           
  1179                           ;hehe.c: 128: isFlow=0;
  1180  0072' 0E00               	movlw	0
  1181  0074' 6E08'              	movwf	_isFlow+1,c
  1182  0076' 0E00               	movlw	0
  1183  0078' 6E07'              	movwf	_isFlow,c
  1184                           
  1185                           ;hehe.c: 130: TRISDbits.RD0 = 0;
  1186  007A' 9095               	bcf	3989,0,c	;volatile
  1187  007C' 0012               	return		;funcret
  1188  007E'                    __end_of_init:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           intcon	equ	0xFF2
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           postdec1	equ	0xFE5
  1198                           fsr1l	equ	0xFE1
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function _srand *****************
  1202 ;; Defined at:
  1203 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\rand.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  x               2    0[COMRAM] unsigned int 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		status,2
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1217 ;;      Params:         2       0       0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0
  1220 ;;      Totals:         2       0       0       0       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_init
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text5
  1231  0000'                    __ptext5:
  1232                           	opt stack 0
  1233  0000'                    _srand:
  1234                           	opt stack 29
  1235                           
  1236                           ;incstack = 0
  1237  0000' C000' F000'        	movff	srand@x,_randx
  1238  0004' C001' F001'        	movff	srand@x+1,_randx+1
  1239  0008' 6A02'              	clrf	_randx+2,c
  1240  000A' 6A03'              	clrf	_randx+3,c
  1241  000C' 0012               	return		;funcret
  1242  000E'                    __end_of_srand:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           intcon	equ	0xFF2
  1249                           postinc0	equ	0xFEE
  1250                           wreg	equ	0xFE8
  1251                           postdec1	equ	0xFE5
  1252                           fsr1l	equ	0xFE1
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function ___wmul *****************
  1256 ;; Defined at:
  1257 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  multiplier      2    0[COMRAM] unsigned int 
  1260 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  product         2    4[COMRAM] unsigned int 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  2    0[COMRAM] unsigned int 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0, prodl, prodh
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1272 ;;      Params:         4       0       0       0       0       0       0
  1273 ;;      Locals:         2       0       0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0
  1275 ;;      Totals:         6       0       0       0       0       0       0
  1276 ;;Total ram usage:        6 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_led_send
  1282 ;;		_init
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text6
  1288  0000'                    __ptext6:
  1289                           	opt stack 0
  1290  0000'                    ___wmul:
  1291                           	opt stack 29
  1292                           
  1293                           ;incstack = 0
  1294  0000' 5000'              	movf	___wmul@multiplier,w,c
  1295  0002' 0202'              	mulwf	___wmul@multiplicand,c
  1296  0004' CFF3 F004'         	movff	prodl,___wmul@product
  1297  0008' CFF4 F005'         	movff	prodh,___wmul@product+1
  1298  000C' 5000'              	movf	___wmul@multiplier,w,c
  1299  000E' 0203'              	mulwf	___wmul@multiplicand+1,c
  1300  0010' 50F3               	movf	prodl,w,c
  1301  0012' 2605'              	addwf	___wmul@product+1,f,c
  1302  0014' 5001'              	movf	___wmul@multiplier+1,w,c
  1303  0016' 0202'              	mulwf	___wmul@multiplicand,c
  1304  0018' 50F3               	movf	prodl,w,c
  1305  001A' 2605'              	addwf	___wmul@product+1,f,c
  1306  001C' C004' F000'        	movff	___wmul@product,?___wmul
  1307  0020' C005' F001'        	movff	___wmul@product+1,?___wmul+1
  1308  0024' 0012               	return	
  1309  0026'                    __end_of___wmul:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           prodh	equ	0xFF4
  1316                           prodl	equ	0xFF3
  1317                           intcon	equ	0xFF2
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           postdec1	equ	0xFE5
  1321                           fsr1l	equ	0xFE1
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _bitflip *****************
  1325 ;; Defined at:
  1326 ;;		line 105 in file "hehe.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  b               1    wreg     unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  b               1    6[COMRAM] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  4    0[COMRAM] unsigned long 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:         4       0       0       0       0       0       0
  1341 ;;      Locals:         1       0       0       0       0       0       0
  1342 ;;      Temps:          2       0       0       0       0       0       0
  1343 ;;      Totals:         7       0       0       0       0       0       0
  1344 ;;Total ram usage:        7 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text7
  1354  0000'                    __ptext7:
  1355                           	opt stack 0
  1356  0000'                    _bitflip:
  1357                           	opt stack 30
  1358                           
  1359                           ;incstack = 0
  1360                           ;bitflip@b stored from wreg
  1361  0000' 6E06'              	movwf	bitflip@b,c
  1362                           
  1363                           ;hehe.c: 106: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  1364  0002' C006' F004'        	movff	bitflip@b,??_bitflip
  1365  0006' 0E0F               	movlw	15
  1366  0008' 1604'              	andwf	??_bitflip,f,c
  1367  000A' 3A04'              	swapf	??_bitflip,f,c
  1368  000C' 0EF0               	movlw	240
  1369  000E' 1604'              	andwf	??_bitflip,f,c
  1370  0010' 3806'              	swapf	bitflip@b,w,c
  1371  0012' 0B0F               	andlw	15
  1372  0014' 0B0F               	andlw	15
  1373  0016' 1004'              	iorwf	??_bitflip,w,c
  1374  0018' 6E06'              	movwf	bitflip@b,c
  1375                           
  1376                           ;hehe.c: 107: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  1377  001A' C006' F004'        	movff	bitflip@b,??_bitflip
  1378  001E' 0E33               	movlw	51
  1379  0020' 1604'              	andwf	??_bitflip,f,c
  1380  0022' 90D8               	bcf	status,0,c
  1381  0024' 3604'              	rlcf	??_bitflip,f,c
  1382  0026' 90D8               	bcf	status,0,c
  1383  0028' 3604'              	rlcf	??_bitflip,f,c
  1384  002A' 4006'              	rrncf	bitflip@b,w,c
  1385  002C' 42E8               	rrncf	wreg,f,c
  1386  002E' 0B3F               	andlw	63
  1387  0030' 0B33               	andlw	51
  1388  0032' 1004'              	iorwf	??_bitflip,w,c
  1389  0034' 6E06'              	movwf	bitflip@b,c
  1390                           
  1391                           ;hehe.c: 108: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  1392  0036' C006' F004'        	movff	bitflip@b,??_bitflip
  1393  003A' 0E55               	movlw	85
  1394  003C' 1604'              	andwf	??_bitflip,f,c
  1395  003E' 90D8               	bcf	status,0,c
  1396  0040' 3404'              	rlcf	??_bitflip,w,c
  1397  0042' 6E00'              	movwf	(??_bitflip+1)& (0+255),c
  1398  0044' 90D8               	bcf	status,0,c
  1399  0046' 3006'              	rrcf	bitflip@b,w,c
  1400  0048' 0B55               	andlw	85
  1401  004A' 1005'              	iorwf	??_bitflip+1,w,c
  1402  004C' 6E06'              	movwf	bitflip@b,c
  1403                           
  1404                           ;hehe.c: 109: return (unsigned char)b;
  1405  004E' 5006'              	movf	bitflip@b,w,c
  1406  0050' 6E00'              	movwf	?_bitflip,c
  1407  0052' 6A01'              	clrf	?_bitflip+1,c
  1408  0054' 6A02'              	clrf	?_bitflip+2,c
  1409  0056' 6A03'              	clrf	?_bitflip+3,c
  1410  0058' 0012               	return	
  1411  005A'                    __end_of_bitflip:
  1412                           	opt stack 0
  1413  0000                     tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           prodh	equ	0xFF4
  1418                           prodl	equ	0xFF3
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           status	equ	0xFD8
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           prodh	equ	0xFF4
  1430                           prodl	equ	0xFF3
  1431                           intcon	equ	0xFF2
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           postdec1	equ	0xFE5
  1435                           fsr1l	equ	0xFE1
  1436                           status	equ	0xFD8
  1437                           
  1438                           	psect	rparam
  1439  0000                     tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           prodh	equ	0xFF4
  1444                           prodl	equ	0xFF3
  1445                           intcon	equ	0xFF2
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         11
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     48      78
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    time$0	PTR long  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_led_send
    _rand->___lmul
    _led_send->___lmul
    _init->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    4406
                                             37 COMRAM    11    11      0
                             ___wmul
                            _bitflip
                               _init
                           _led_send
                               _rand
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     522
                                             12 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _led_send                                            25    23      2    1683
                                             12 COMRAM    25    23      2
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     522
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1029
                             ___wmul
                              _srand
                               _time
 ---------------------------------------------------------------------------------
 (2) _time                                                 4     0      4      12
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 COMRAM     2     0      2
                               _time (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     919
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _bitflip                                              7     3      4     157
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _bitflip
   _init
     ___wmul
     _srand
       _time (ARG)
     _time
   _led_send
     ___lmul
     ___wmul
   _rand
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     30      4E       1       61.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E      15        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Dec 17 00:44:24 2017

                     l50 0000F6                       l43 000122                       l51 000106  
                     l44 0000AA                       l45 0000BE                       l70 000124  
                     l47 0000CC                       l71 00013A                       l72 000170  
                     l64 00002A                       l49 0000E0                       l73 00014C  
                     l74 00015C                       l66 000064                       l75 000156  
                     l68 0000D4                       l69 0000EC                       l95 000010  
                     l79 000180                       l96 000024      ___wmul@multiplicand 000002  
                    l991 00014C                      l993 000156                      _GIE 007F97  
                    u260 0000FA                      u280 00016A                      u290 00017E  
           __CFG_CPD$OFF 000000                      _led 000004                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     _flag 000009  
                   _main 000000                     _init 000000                     _rand 000000  
                   _tmp1 00000E                     _tmp2 00000D                     _tmp3 00000C  
                   _temp 000000                     _time 000000*                    fsr1l 000FE1  
          __CFG_BOREN$ON 000000                     prodh 000FF4                     prodl 000FF3  
                   start 000000*            ___param_bank 000000              led_send@buf 000023  
            led_send@val 00001F                    ?_main 000000                    ?_init 000000  
                  ?_rand 00000C                    ?_time 000000            __CFG_PWRT$OFF 000000  
    ___lmul@multiplicand 000004          __end_of_bitflip 00005A                    _randx 000000  
                  _srand 000000                    main@k 00002A                    main@l 00002C  
                  tablat 000FF5                    status 000FD8          led_send@back_24 000017  
        __initialization 000000             __end_of_main 000186             __end_of_init 00007E  
           __end_of_rand 000052                   ??_main 000025                   ??_init 000006  
                 ??_rand 00000E                   ??_time 000000            __activetblptr 000000  
                 ?_srand 000000         __end_of_led_send 000166                   ___lmul 000000  
                 ___wmul 000000                   _isFlow 000007                   _ledmax 000008  
                 _lednum 00000A                   _time$0 000000                   clear_0 000026  
              ??_bitflip 000004             __pdataCOMRAM 000000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   srand@x 000000  
             __accesstop 000000* __end_of__initialization 00002C            ___rparam_used 000001  
         __pcstackCOMRAM 000000            __end_of_srand 00000E            led_send@front 00000C  
       led_send@front_24 000013                  ??_srand 000002               __pnvCOMRAM 000000  
                ?___lmul 000000                  ?___wmul 000000           ___lmul@product 000008  
              ?_led_send 00000C                  __Hparam 000000                  __Lparam 000000  
        __size_of___lmul 000000          __size_of___wmul 000000                  __pcinit 000000  
                __ramtop 000000*                 _bitflip 000000                  __ptext0 000000  
                __ptext1 000000                  __ptext2 000000                  __ptext3 000000  
                __ptext4 000000                  __ptext5 000000                  __ptext6 000000  
                __ptext7 000000     end_of_initialization 00002C               ??_led_send 00000E  
                postdec1 000FE5                  postinc0 000FEE                _PORTDbits 000F83  
              _TRISDbits 000F95           __end_of___lmul 000056           __end_of___wmul 000026  
          __pidataCOMRAM 000000      start_initialization 000000         __CFG_OSC$INTIO67 000000  
               ??___lmul 000008                 ??___wmul 000004              __pbssCOMRAM 000000  
      __size_of_led_send 000000                 ?_bitflip 000000                _ledlength 000004  
              _lednum_24 000000           __size_of_srand 000000           ___wmul@product 000004  
      ___wmul@multiplier 000000                main@front 00002E                led_send@i 00001B  
      ___lmul@multiplier 000000                copy_data0 000014                 __Hrparam 000000* 
               __Lrparam 000000*        __size_of_bitflip 000000                 _led_send 000000  
          __size_of_main 000000            __size_of_init 000000            __size_of_rand 000000  
               bitflip@b 000006              _OSCTUNEbits 000F9B               _OSCCONbits 000FD3  
