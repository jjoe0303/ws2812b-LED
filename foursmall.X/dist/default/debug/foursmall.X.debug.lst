

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Dec 17 00:27:03 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.44
    19                           ; Generated 14/09/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4520 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	nvCOMRAM
    54  000038                     __pnvCOMRAM:
    55                           	opt stack 0
    56  000038                     _lednum_24:
    57                           	opt stack 0
    58  000038                     	ds	4
    59  00003C                     _ledlength:
    60                           	opt stack 0
    61  00003C                     	ds	4
    62  000040                     _ledmax:
    63                           	opt stack 0
    64  000040                     	ds	2
    65  000042                     _lednum:
    66                           	opt stack 0
    67  000042                     	ds	2
    68  000044                     _tmp3:
    69                           	opt stack 0
    70  000044                     	ds	1
    71  000045                     _tmp2:
    72                           	opt stack 0
    73  000045                     	ds	1
    74  000046                     _tmp1:
    75                           	opt stack 0
    76  000046                     	ds	1
    77  0000                     _TRISDbits	set	3989
    78  0000                     _OSCTUNEbits	set	3995
    79  0000                     _PORTDbits	set	3971
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _GIE	set	32663
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  00788E                     __pcinit:
    87                           	opt stack 0
    88  00788E                     start_initialization:
    89                           	opt stack 0
    90  00788E                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (11 bytes)
    94  00788E  EE00  F047         	lfsr	0,__pbssCOMRAM
    95  007892  0E0B               	movlw	11
    96  007894                     clear_0:
    97  007894  6AEE               	clrf	postinc0,c
    98  007896  06E8               	decf	wreg,f,c
    99  007898  E1FD               	bnz	clear_0
   100  00789A                     end_of_initialization:
   101                           	opt stack 0
   102  00789A                     __end_of__initialization:
   103                           	opt stack 0
   104  00789A  0100               	movlb	0
   105  00789C  EFEE  F03C         	goto	_main	;jump to C main() function
   106                           postinc0	equ	0xFEE
   107                           wreg	equ	0xFE8
   108                           
   109                           	psect	bssCOMRAM
   110  000047                     __pbssCOMRAM:
   111                           	opt stack 0
   112  000047                     _temp:
   113                           	opt stack 0
   114  000047                     	ds	4
   115  00004B                     _led:
   116                           	opt stack 0
   117  00004B                     	ds	3
   118  00004E                     _isFlow:
   119                           	opt stack 0
   120  00004E                     	ds	2
   121  000050                     _flag:
   122                           	opt stack 0
   123  000050                     	ds	2
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	cstackCOMRAM
   128  000001                     __pcstackCOMRAM:
   129                           	opt stack 0
   130  000001                     ?___wmul:
   131                           	opt stack 0
   132  000001                     ?_bitflip:
   133                           	opt stack 0
   134  000001                     ?___lmul:
   135                           	opt stack 0
   136  000001                     ___wmul@multiplier:
   137                           	opt stack 0
   138  000001                     ___lmul@multiplier:
   139                           	opt stack 0
   140                           
   141                           ; 4 bytes @ 0x0
   142  000001                     	ds	2
   143  000003                     ___wmul@multiplicand:
   144                           	opt stack 0
   145                           
   146                           ; 2 bytes @ 0x2
   147  000003                     	ds	2
   148  000005                     ??_bitflip:
   149  000005                     ___wmul@product:
   150                           	opt stack 0
   151  000005                     ___lmul@multiplicand:
   152                           	opt stack 0
   153                           
   154                           ; 4 bytes @ 0x4
   155  000005                     	ds	2
   156  000007                     bitflip@b:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x6
   160  000007                     	ds	2
   161  000009                     ___lmul@product:
   162                           	opt stack 0
   163                           
   164                           ; 4 bytes @ 0x8
   165  000009                     	ds	4
   166  00000D                     led_send@front:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0xC
   170  00000D                     	ds	2
   171  00000F                     ??_led_send:
   172                           
   173                           ; 1 bytes @ 0xE
   174  00000F                     	ds	4
   175  000013                     led_send@front_24:
   176                           	opt stack 0
   177                           
   178                           ; 4 bytes @ 0x12
   179  000013                     	ds	4
   180  000017                     led_send@back_24:
   181                           	opt stack 0
   182                           
   183                           ; 4 bytes @ 0x16
   184  000017                     	ds	4
   185  00001B                     led_send@i:
   186                           	opt stack 0
   187                           
   188                           ; 4 bytes @ 0x1A
   189  00001B                     	ds	4
   190  00001F                     led_send@i_215:
   191                           	opt stack 0
   192                           
   193                           ; 4 bytes @ 0x1E
   194  00001F                     	ds	4
   195  000023                     led_send@i_216:
   196                           	opt stack 0
   197                           
   198                           ; 4 bytes @ 0x22
   199  000023                     	ds	4
   200  000027                     led_send@val:
   201                           	opt stack 0
   202                           
   203                           ; 4 bytes @ 0x26
   204  000027                     	ds	4
   205  00002B                     led_send@buf:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x2A
   209  00002B                     	ds	2
   210  00002D                     ??_main:
   211                           
   212                           ; 1 bytes @ 0x2C
   213  00002D                     	ds	5
   214  000032                     main@k:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x31
   218  000032                     	ds	2
   219  000034                     main@l:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x33
   223  000034                     	ds	2
   224  000036                     main@front:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x35
   228  000036                     	ds	2
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           
   232 ;;
   233 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   234 ;;
   235 ;; *************** function _main *****************
   236 ;; Defined at:
   237 ;;		line 131 in file "hehe.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;		None
   240 ;; Auto vars:     Size  Location     Type
   241 ;;  l               2   51[COMRAM] int 
   242 ;;  k               2   49[COMRAM] int 
   243 ;;  front           2   53[COMRAM] int 
   244 ;; Return value:  Size  Location     Type
   245 ;;                  1    wreg      void 
   246 ;; Registers used:
   247 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   248 ;; Tracked objects:
   249 ;;		On entry : 0/0
   250 ;;		On exit  : 0/0
   251 ;;		Unchanged: 0/0
   252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   253 ;;      Params:         0       0       0       0       0       0       0
   254 ;;      Locals:         6       0       0       0       0       0       0
   255 ;;      Temps:          5       0       0       0       0       0       0
   256 ;;      Totals:        11       0       0       0       0       0       0
   257 ;;Total ram usage:       11 bytes
   258 ;; Hardware stack levels required when called:    2
   259 ;; This function calls:
   260 ;;		___wmul
   261 ;;		_bitflip
   262 ;;		_init
   263 ;;		_led_send
   264 ;; This function is called by:
   265 ;;		Startup code after reset
   266 ;; This function uses a non-reentrant model
   267 ;;
   268                           
   269                           	psect	text0
   270  0079DC                     __ptext0:
   271                           	opt stack 0
   272  0079DC                     _main:
   273                           	opt stack 29
   274                           
   275                           ;hehe.c: 132: init();
   276                           
   277                           ;incstack = 0
   278  0079DC  ECBB  F03C         	call	_init	;wreg free
   279                           
   280                           ;hehe.c: 133: tmp1=bitflip(led.g);
   281  0079E0  504D               	movf	_led+2,w,c
   282  0079E2  EC8E  F03C         	call	_bitflip
   283  0079E6  5001               	movf	?_bitflip,w,c
   284  0079E8  6E46               	movwf	_tmp1,c
   285                           
   286                           ;hehe.c: 134: tmp2=bitflip(led.r);
   287  0079EA  504B               	movf	_led,w,c
   288  0079EC  EC8E  F03C         	call	_bitflip
   289  0079F0  5001               	movf	?_bitflip,w,c
   290  0079F2  6E45               	movwf	_tmp2,c
   291                           
   292                           ;hehe.c: 135: tmp3=bitflip(led.b);
   293  0079F4  504C               	movf	_led+1,w,c
   294  0079F6  EC8E  F03C         	call	_bitflip
   295  0079FA  5001               	movf	?_bitflip,w,c
   296  0079FC  6E44               	movwf	_tmp3,c
   297                           
   298                           ;hehe.c: 137: int front = 0;
   299  0079FE  0E00               	movlw	0
   300  007A00  6E37               	movwf	main@front+1,c
   301  007A02  0E00               	movlw	0
   302  007A04  6E36               	movwf	main@front,c
   303  007A06                     l64:
   304  007A06  0004               	clrwdt		;# 
   305                           
   306                           ;hehe.c: 141: GIE = 0; while (GIE);
   307  007A08  9EF2               	bcf	intcon,7,c	;volatile
   308  007A0A  BEF2               	btfsc	intcon,7,c	;volatile
   309  007A0C  D7FE               	goto	l66
   310                           
   311                           ;hehe.c: 142: if(front > ledlength)
   312  007A0E  C036  F02D         	movff	main@front,??_main
   313  007A12  C037  F02E         	movff	main@front+1,??_main+1
   314  007A16  0E00               	movlw	0
   315  007A18  BE2E               	btfsc	(??_main+1)& (0+255),7,c
   316  007A1A  0EFF               	movlw	255
   317  007A1C  6E2F               	movwf	(??_main+2)& (0+255),c
   318  007A1E  6E30               	movwf	(??_main+3)& (0+255),c
   319  007A20  502D               	movf	??_main,w,c
   320  007A22  5C3C               	subwf	_ledlength,w,c
   321  007A24  502E               	movf	??_main+1,w,c
   322  007A26  583D               	subwfb	_ledlength+1,w,c
   323  007A28  502F               	movf	??_main+2,w,c
   324  007A2A  583E               	subwfb	_ledlength+2,w,c
   325  007A2C  503F               	movf	_ledlength+3,w,c
   326  007A2E  0A80               	xorlw	128
   327  007A30  6E31               	movwf	(??_main+4)& (0+255),c
   328  007A32  5030               	movf	??_main+3,w,c
   329  007A34  0A80               	xorlw	128
   330  007A36  5831               	subwfb	(??_main+4)& (0+255),w,c
   331  007A38  B0D8               	btfsc	status,0,c
   332  007A3A  D01F               	goto	l68
   333                           
   334                           ;hehe.c: 143: {
   335                           ;hehe.c: 144: front=0;
   336  007A3C  0E00               	movlw	0
   337  007A3E  6E37               	movwf	main@front+1,c
   338  007A40  0E00               	movlw	0
   339  007A42  6E36               	movwf	main@front,c
   340                           
   341                           ;hehe.c: 145: isFlow=0;
   342  007A44  0E00               	movlw	0
   343  007A46  6E4F               	movwf	_isFlow+1,c
   344  007A48  0E00               	movlw	0
   345  007A4A  6E4E               	movwf	_isFlow,c
   346                           
   347                           ;hehe.c: 146: lednum=1;
   348  007A4C  0E00               	movlw	0
   349  007A4E  6E43               	movwf	_lednum+1,c
   350  007A50  0E01               	movlw	1
   351  007A52  6E42               	movwf	_lednum,c
   352                           
   353                           ;hehe.c: 147: lednum_24= lednum*24;
   354  007A54  C042  F001         	movff	_lednum,___wmul@multiplier
   355  007A58  C043  F002         	movff	_lednum+1,___wmul@multiplier+1
   356  007A5C  0E00               	movlw	0
   357  007A5E  6E04               	movwf	___wmul@multiplicand+1,c
   358  007A60  0E18               	movlw	24
   359  007A62  6E03               	movwf	___wmul@multiplicand,c
   360  007A64  EC50  F03C         	call	___wmul	;wreg free
   361  007A68  C001  F038         	movff	?___wmul,_lednum_24
   362  007A6C  C002  F039         	movff	?___wmul+1,_lednum_24+1
   363  007A70  0E00               	movlw	0
   364  007A72  BE39               	btfsc	_lednum_24+1,7,c
   365  007A74  0EFF               	movlw	-1
   366  007A76  6E3A               	movwf	_lednum_24+2,c
   367  007A78  6E3B               	movwf	_lednum_24+3,c
   368  007A7A                     l68:
   369                           
   370                           ;hehe.c: 148: }
   371                           ;hehe.c: 149: led_send(front);
   372  007A7A  C036  F00D         	movff	main@front,led_send@front
   373  007A7E  C037  F00E         	movff	main@front+1,led_send@front+1
   374  007A82  EC96  F03D         	call	_led_send	;wreg free
   375                           
   376                           ;hehe.c: 150: if(isFlow){
   377  007A86  504E               	movf	_isFlow,w,c
   378  007A88  104F               	iorwf	_isFlow+1,w,c
   379  007A8A  B4D8               	btfsc	status,2,c
   380  007A8C  D002               	goto	l69
   381                           
   382                           ;hehe.c: 151: front++;
   383  007A8E  4A36               	infsnz	main@front,f,c
   384  007A90  2A37               	incf	main@front+1,f,c
   385  007A92                     l69:
   386                           
   387                           ;hehe.c: 152: }
   388                           ;hehe.c: 153: if(lednum!=ledmax)
   389  007A92  5040               	movf	_ledmax,w,c
   390  007A94  1842               	xorwf	_lednum,w,c
   391  007A96  E104               	bnz	u300
   392  007A98  5041               	movf	_ledmax+1,w,c
   393  007A9A  1843               	xorwf	_lednum+1,w,c
   394  007A9C  B4D8               	btfsc	status,2,c
   395  007A9E  D015               	goto	l70
   396  007AA0                     u300:
   397                           
   398                           ;hehe.c: 154: {
   399                           ;hehe.c: 155: lednum++;
   400  007AA0  4A42               	infsnz	_lednum,f,c
   401  007AA2  2A43               	incf	_lednum+1,f,c
   402                           
   403                           ;hehe.c: 156: lednum_24= lednum*24;
   404  007AA4  C042  F001         	movff	_lednum,___wmul@multiplier
   405  007AA8  C043  F002         	movff	_lednum+1,___wmul@multiplier+1
   406  007AAC  0E00               	movlw	0
   407  007AAE  6E04               	movwf	___wmul@multiplicand+1,c
   408  007AB0  0E18               	movlw	24
   409  007AB2  6E03               	movwf	___wmul@multiplicand,c
   410  007AB4  EC50  F03C         	call	___wmul	;wreg free
   411  007AB8  C001  F038         	movff	?___wmul,_lednum_24
   412  007ABC  C002  F039         	movff	?___wmul+1,_lednum_24+1
   413  007AC0  0E00               	movlw	0
   414  007AC2  BE39               	btfsc	_lednum_24+1,7,c
   415  007AC4  0EFF               	movlw	-1
   416  007AC6  6E3A               	movwf	_lednum_24+2,c
   417  007AC8  6E3B               	movwf	_lednum_24+3,c
   418  007ACA                     l70:
   419                           
   420                           ;hehe.c: 157: }
   421                           ;hehe.c: 158: if(lednum==ledmax)
   422  007ACA  5040               	movf	_ledmax,w,c
   423  007ACC  1842               	xorwf	_lednum,w,c
   424  007ACE  E108               	bnz	l71
   425  007AD0  5041               	movf	_ledmax+1,w,c
   426  007AD2  1843               	xorwf	_lednum+1,w,c
   427  007AD4  A4D8               	btfss	status,2,c
   428  007AD6  D004               	goto	l71
   429                           
   430                           ;hehe.c: 159: {
   431                           ;hehe.c: 160: isFlow=1;
   432  007AD8  0E00               	movlw	0
   433  007ADA  6E4F               	movwf	_isFlow+1,c
   434  007ADC  0E01               	movlw	1
   435  007ADE  6E4E               	movwf	_isFlow,c
   436  007AE0                     l71:
   437                           
   438                           ;hehe.c: 161: }
   439                           ;hehe.c: 163: int k = 1 , l = 5;
   440  007AE0  0E00               	movlw	0
   441  007AE2  6E33               	movwf	main@k+1,c
   442  007AE4  0E01               	movlw	1
   443  007AE6  6E32               	movwf	main@k,c
   444  007AE8  0E00               	movlw	0
   445  007AEA  6E35               	movwf	main@l+1,c
   446  007AEC  0E05               	movlw	5
   447  007AEE  6E34               	movwf	main@l,c
   448                           
   449                           ;hehe.c: 164: while( k > 0 ) {
   450  007AF0  D012               	goto	l72
   451  007AF2                     l947:
   452                           
   453                           ;hehe.c: 165: l = 5;
   454  007AF2  0E00               	movlw	0
   455  007AF4  6E35               	movwf	main@l+1,c
   456  007AF6  0E05               	movlw	5
   457  007AF8  6E34               	movwf	main@l,c
   458                           
   459                           ;hehe.c: 166: while( l > 0) {
   460  007AFA  D003               	goto	l74
   461  007AFC                     l949:
   462                           
   463                           ;hehe.c: 167: l--;
   464  007AFC  0634               	decf	main@l,f,c
   465  007AFE  A0D8               	btfss	status,0,c
   466  007B00  0635               	decf	main@l+1,f,c
   467  007B02                     l74:
   468  007B02  BE35               	btfsc	main@l+1,7,c
   469  007B04  D005               	goto	u320
   470  007B06  5035               	movf	main@l+1,w,c
   471  007B08  E1F9               	bnz	l949
   472  007B0A  0434               	decf	main@l,w,c
   473  007B0C  B0D8               	btfsc	status,0,c
   474  007B0E  D7F6               	goto	l75
   475  007B10                     u320:
   476                           
   477                           ;hehe.c: 168: }
   478                           ;hehe.c: 169: k--;
   479  007B10  0632               	decf	main@k,f,c
   480  007B12  A0D8               	btfss	status,0,c
   481  007B14  0633               	decf	main@k+1,f,c
   482  007B16                     l72:
   483  007B16  BE33               	btfsc	main@k+1,7,c
   484  007B18  D005               	goto	u330
   485  007B1A  5033               	movf	main@k+1,w,c
   486  007B1C  E1EA               	bnz	l947
   487  007B1E  0432               	decf	main@k,w,c
   488  007B20  B0D8               	btfsc	status,0,c
   489  007B22  D7E7               	goto	l73
   490  007B24                     u330:
   491                           
   492                           ;hehe.c: 170: }
   493                           ;hehe.c: 172: GIE = 1; while (!GIE);
   494  007B24  8EF2               	bsf	intcon,7,c	;volatile
   495  007B26  BEF2               	btfsc	intcon,7,c	;volatile
   496  007B28  D76E               	goto	l64
   497  007B2A  D7FD               	goto	l79
   498  007B2C                     __end_of_main:
   499                           	opt stack 0
   500                           intcon	equ	0xFF2
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           status	equ	0xFD8
   504                           
   505 ;; *************** function _led_send *****************
   506 ;; Defined at:
   507 ;;		line 36 in file "hehe.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;  front           2   12[COMRAM] int 
   510 ;; Auto vars:     Size  Location     Type
   511 ;;  i               4   34[COMRAM] long 
   512 ;;  i               4   30[COMRAM] long 
   513 ;;  i               4   26[COMRAM] long 
   514 ;;  val             4   38[COMRAM] long 
   515 ;;  back_24         4   22[COMRAM] long 
   516 ;;  front_24        4   18[COMRAM] long 
   517 ;;  buf             2   42[COMRAM] int 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   527 ;;      Params:         2       0       0       0       0       0       0
   528 ;;      Locals:        26       0       0       0       0       0       0
   529 ;;      Temps:          4       0       0       0       0       0       0
   530 ;;      Totals:        32       0       0       0       0       0       0
   531 ;;Total ram usage:       32 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    1
   534 ;; This function calls:
   535 ;;		___lmul
   536 ;;		___wmul
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text1
   543  007B2C                     __ptext1:
   544                           	opt stack 0
   545  007B2C                     _led_send:
   546                           	opt stack 29
   547                           
   548                           ;hehe.c: 37: long int front_24 = front * 24;
   549                           
   550                           ;incstack = 0
   551  007B2C  C00D  F001         	movff	led_send@front,___wmul@multiplier
   552  007B30  C00E  F002         	movff	led_send@front+1,___wmul@multiplier+1
   553  007B34  0E00               	movlw	0
   554  007B36  6E04               	movwf	___wmul@multiplicand+1,c
   555  007B38  0E18               	movlw	24
   556  007B3A  6E03               	movwf	___wmul@multiplicand,c
   557  007B3C  EC50  F03C         	call	___wmul	;wreg free
   558  007B40  C001  F013         	movff	?___wmul,led_send@front_24
   559  007B44  C002  F014         	movff	?___wmul+1,led_send@front_24+1
   560  007B48  0E00               	movlw	0
   561  007B4A  BE14               	btfsc	led_send@front_24+1,7,c
   562  007B4C  0EFF               	movlw	-1
   563  007B4E  6E15               	movwf	led_send@front_24+2,c
   564  007B50  6E16               	movwf	led_send@front_24+3,c
   565                           
   566                           ;hehe.c: 38: int buf = 24;
   567  007B52  0E00               	movlw	0
   568  007B54  6E2C               	movwf	led_send@buf+1,c
   569  007B56  0E18               	movlw	24
   570  007B58  6E2B               	movwf	led_send@buf,c
   571                           
   572                           ;hehe.c: 39: long int val = (long int)tmp1;
   573  007B5A  5046               	movf	_tmp1,w,c
   574  007B5C  6E27               	movwf	led_send@val,c
   575  007B5E  6A28               	clrf	led_send@val+1,c
   576  007B60  6A29               	clrf	led_send@val+2,c
   577  007B62  6A2A               	clrf	led_send@val+3,c
   578                           
   579                           ;hehe.c: 40: long int back_24 = (ledlength - front ) * 24;
   580  007B64  C00D  F00F         	movff	led_send@front,??_led_send
   581  007B68  C00E  F010         	movff	led_send@front+1,??_led_send+1
   582  007B6C  0E00               	movlw	0
   583  007B6E  BE10               	btfsc	(??_led_send+1)& (0+255),7,c
   584  007B70  0EFF               	movlw	255
   585  007B72  6E11               	movwf	(??_led_send+2)& (0+255),c
   586  007B74  6E12               	movwf	(??_led_send+3)& (0+255),c
   587  007B76  1E0F               	comf	??_led_send,f,c
   588  007B78  1E10               	comf	??_led_send+1,f,c
   589  007B7A  1E11               	comf	??_led_send+2,f,c
   590  007B7C  1E12               	comf	??_led_send+3,f,c
   591  007B7E  2A0F               	incf	??_led_send,f,c
   592  007B80  0E00               	movlw	0
   593  007B82  2210               	addwfc	??_led_send+1,f,c
   594  007B84  2211               	addwfc	??_led_send+2,f,c
   595  007B86  2212               	addwfc	??_led_send+3,f,c
   596  007B88  503C               	movf	_ledlength,w,c
   597  007B8A  240F               	addwf	??_led_send,w,c
   598  007B8C  6E01               	movwf	___lmul@multiplier,c
   599  007B8E  503D               	movf	_ledlength+1,w,c
   600  007B90  2010               	addwfc	??_led_send+1,w,c
   601  007B92  6E02               	movwf	___lmul@multiplier+1,c
   602  007B94  503E               	movf	_ledlength+2,w,c
   603  007B96  2011               	addwfc	??_led_send+2,w,c
   604  007B98  6E03               	movwf	___lmul@multiplier+2,c
   605  007B9A  503F               	movf	_ledlength+3,w,c
   606  007B9C  2012               	addwfc	??_led_send+3,w,c
   607  007B9E  6E04               	movwf	___lmul@multiplier+3,c
   608  007BA0  0E18               	movlw	24
   609  007BA2  6E05               	movwf	___lmul@multiplicand,c
   610  007BA4  0E00               	movlw	0
   611  007BA6  6E06               	movwf	___lmul@multiplicand+1,c
   612  007BA8  0E00               	movlw	0
   613  007BAA  6E07               	movwf	___lmul@multiplicand+2,c
   614  007BAC  0E00               	movlw	0
   615  007BAE  6E08               	movwf	___lmul@multiplicand+3,c
   616  007BB0  EC63  F03C         	call	___lmul	;wreg free
   617  007BB4  C001  F017         	movff	?___lmul,led_send@back_24
   618  007BB8  C002  F018         	movff	?___lmul+1,led_send@back_24+1
   619  007BBC  C003  F019         	movff	?___lmul+2,led_send@back_24+2
   620  007BC0  C004  F01A         	movff	?___lmul+3,led_send@back_24+3
   621                           
   622                           ;hehe.c: 42: for(long int i = 0; i < front_24; ++i){
   623  007BC4  0E00               	movlw	0
   624  007BC6  6E1B               	movwf	led_send@i,c
   625  007BC8  0E00               	movlw	0
   626  007BCA  6E1C               	movwf	led_send@i+1,c
   627  007BCC  0E00               	movlw	0
   628  007BCE  6E1D               	movwf	led_send@i+2,c
   629  007BD0  0E00               	movlw	0
   630  007BD2  6E1E               	movwf	led_send@i+3,c
   631  007BD4  D00E               	goto	l37
   632  007BD6                     l38:
   633                           
   634                           ;hehe.c: 43: PORTDbits.RD0 = 1;
   635  007BD6  8083               	bsf	3971,0,c	;volatile
   636                           
   637                           ;hehe.c: 44: PORTDbits.RD0 = 0;
   638  007BD8  9083               	bcf	3971,0,c	;volatile
   639                           
   640                           ;hehe.c: 45: __nop();
   641  007BDA  F000               	nop	
   642                           
   643                           ;hehe.c: 46: __nop();
   644  007BDC  F000               	nop	
   645                           
   646                           ;hehe.c: 47: __nop();
   647  007BDE  F000               	nop	
   648                           
   649                           ;hehe.c: 48: __nop();
   650  007BE0  F000               	nop	
   651                           
   652                           ;hehe.c: 49: __nop();
   653  007BE2  F000               	nop	
   654                           
   655                           ;hehe.c: 50: __nop();
   656  007BE4  F000               	nop	
   657  007BE6  0E01               	movlw	1
   658  007BE8  261B               	addwf	led_send@i,f,c
   659  007BEA  0E00               	movlw	0
   660  007BEC  221C               	addwfc	led_send@i+1,f,c
   661  007BEE  221D               	addwfc	led_send@i+2,f,c
   662  007BF0  221E               	addwfc	led_send@i+3,f,c
   663  007BF2                     l37:
   664  007BF2  5013               	movf	led_send@front_24,w,c
   665  007BF4  5C1B               	subwf	led_send@i,w,c
   666  007BF6  5014               	movf	led_send@front_24+1,w,c
   667  007BF8  581C               	subwfb	led_send@i+1,w,c
   668  007BFA  5015               	movf	led_send@front_24+2,w,c
   669  007BFC  581D               	subwfb	led_send@i+2,w,c
   670  007BFE  501E               	movf	led_send@i+3,w,c
   671  007C00  0A80               	xorlw	128
   672  007C02  6E0F               	movwf	??_led_send& (0+255),c
   673  007C04  5016               	movf	led_send@front_24+3,w,c
   674  007C06  0A80               	xorlw	128
   675  007C08  580F               	subwfb	??_led_send& (0+255),w,c
   676  007C0A  A0D8               	btfss	status,0,c
   677  007C0C  D7E4               	goto	l38
   678                           
   679                           ;hehe.c: 51: }
   680                           ;hehe.c: 53: for(long int i = 0; i < lednum_24 ; i++ ){
   681  007C0E  0E00               	movlw	0
   682  007C10  6E1F               	movwf	led_send@i_215,c
   683  007C12  0E00               	movlw	0
   684  007C14  6E20               	movwf	led_send@i_215+1,c
   685  007C16  0E00               	movlw	0
   686  007C18  6E21               	movwf	led_send@i_215+2,c
   687  007C1A  0E00               	movlw	0
   688  007C1C  6E22               	movwf	led_send@i_215+3,c
   689  007C1E  D03C               	goto	l40
   690  007C20                     
   691                           ;hehe.c: 55: if(buf== 0){
   692  007C20  502B               	movf	led_send@buf,w,c
   693  007C22  102C               	iorwf	led_send@buf+1,w,c
   694  007C24  A4D8               	btfss	status,2,c
   695  007C26  D006               	goto	l42
   696                           
   697                           ;hehe.c: 56: buf = 24;
   698  007C28  0E00               	movlw	0
   699  007C2A  6E2C               	movwf	led_send@buf+1,c
   700  007C2C  0E18               	movlw	24
   701  007C2E  6E2B               	movwf	led_send@buf,c
   702                           
   703                           ;hehe.c: 57: val = (long int)tmp1;
   704  007C30  5046               	movf	_tmp1,w,c
   705  007C32  D00D               	goto	L2
   706  007C34                     l42:
   707                           
   708                           ;hehe.c: 59: else if(buf== 16){
   709  007C34  0E10               	movlw	16
   710  007C36  182B               	xorwf	led_send@buf,w,c
   711  007C38  102C               	iorwf	led_send@buf+1,w,c
   712  007C3A  A4D8               	btfss	status,2,c
   713  007C3C  D002               	goto	l44
   714                           
   715                           ;hehe.c: 61: val = (long int)tmp2;
   716  007C3E  5045               	movf	_tmp2,w,c
   717  007C40  D006               	goto	L2
   718  007C42                     l44:
   719                           
   720                           ;hehe.c: 63: else if(buf== 8){
   721  007C42  0E08               	movlw	8
   722  007C44  182B               	xorwf	led_send@buf,w,c
   723  007C46  102C               	iorwf	led_send@buf+1,w,c
   724  007C48  A4D8               	btfss	status,2,c
   725  007C4A  D005               	goto	l46
   726                           
   727                           ;hehe.c: 64: val = (long int)tmp3;
   728  007C4C  5044               	movf	_tmp3,w,c
   729  007C4E                     L2:
   730  007C4E  6E27               	movwf	led_send@val,c
   731  007C50  6A28               	clrf	led_send@val+1,c
   732  007C52  6A29               	clrf	led_send@val+2,c
   733  007C54  6A2A               	clrf	led_send@val+3,c
   734  007C56                     l46:
   735                           
   736                           ;hehe.c: 65: }
   737                           ;hehe.c: 67: if (val & 1) {
   738  007C56  A027               	btfss	led_send@val,0,c
   739  007C58  D009               	goto	l47
   740                           
   741                           ;hehe.c: 68: PORTDbits.RD0 = 1;
   742  007C5A  8083               	bsf	3971,0,c	;volatile
   743                           
   744                           ;hehe.c: 69: __nop();
   745  007C5C  F000               	nop	
   746                           
   747                           ;hehe.c: 70: __nop();
   748  007C5E  F000               	nop	
   749                           
   750                           ;hehe.c: 71: __nop();
   751  007C60  F000               	nop	
   752                           
   753                           ;hehe.c: 72: __nop();
   754  007C62  F000               	nop	
   755                           
   756                           ;hehe.c: 73: __nop();
   757  007C64  F000               	nop	
   758                           
   759                           ;hehe.c: 74: __nop();
   760  007C66  F000               	nop	
   761                           
   762                           ;hehe.c: 75: PORTDbits.RD0 = 0;
   763  007C68  9083               	bcf	3971,0,c	;volatile
   764                           
   765                           ;hehe.c: 77: } else {
   766  007C6A  D008               	goto	l48
   767  007C6C                     l47:
   768                           
   769                           ;hehe.c: 78: PORTDbits.RD0 = 1;
   770  007C6C  8083               	bsf	3971,0,c	;volatile
   771                           
   772                           ;hehe.c: 79: PORTDbits.RD0 = 0;
   773  007C6E  9083               	bcf	3971,0,c	;volatile
   774                           
   775                           ;hehe.c: 80: __nop();
   776  007C70  F000               	nop	
   777                           
   778                           ;hehe.c: 81: __nop();
   779  007C72  F000               	nop	
   780                           
   781                           ;hehe.c: 82: __nop();
   782  007C74  F000               	nop	
   783                           
   784                           ;hehe.c: 83: __nop();
   785  007C76  F000               	nop	
   786                           
   787                           ;hehe.c: 84: __nop();
   788  007C78  F000               	nop	
   789                           
   790                           ;hehe.c: 85: __nop();
   791  007C7A  F000               	nop	
   792  007C7C                     l48:
   793                           
   794                           ;hehe.c: 86: }
   795                           ;hehe.c: 87: val >>= (unsigned char)1;
   796  007C7C  342A               	rlcf	led_send@val+3,w,c
   797  007C7E  322A               	rrcf	led_send@val+3,f,c
   798  007C80  3229               	rrcf	led_send@val+2,f,c
   799  007C82  3228               	rrcf	led_send@val+1,f,c
   800  007C84  3227               	rrcf	led_send@val,f,c
   801                           
   802                           ;hehe.c: 88: buf--;
   803  007C86  062B               	decf	led_send@buf,f,c
   804  007C88  A0D8               	btfss	status,0,c
   805  007C8A  062C               	decf	led_send@buf+1,f,c
   806  007C8C  0E01               	movlw	1
   807  007C8E  261F               	addwf	led_send@i_215,f,c
   808  007C90  0E00               	movlw	0
   809  007C92  2220               	addwfc	led_send@i_215+1,f,c
   810  007C94  2221               	addwfc	led_send@i_215+2,f,c
   811  007C96  2222               	addwfc	led_send@i_215+3,f,c
   812  007C98                     l40:
   813  007C98  5038               	movf	_lednum_24,w,c
   814  007C9A  5C1F               	subwf	led_send@i_215,w,c
   815  007C9C  5039               	movf	_lednum_24+1,w,c
   816  007C9E  5820               	subwfb	led_send@i_215+1,w,c
   817  007CA0  503A               	movf	_lednum_24+2,w,c
   818  007CA2  5821               	subwfb	led_send@i_215+2,w,c
   819  007CA4  5022               	movf	led_send@i_215+3,w,c
   820  007CA6  0A80               	xorlw	128
   821  007CA8  6E0F               	movwf	??_led_send& (0+255),c
   822  007CAA  503B               	movf	_lednum_24+3,w,c
   823  007CAC  0A80               	xorlw	128
   824  007CAE  580F               	subwfb	??_led_send& (0+255),w,c
   825  007CB0  A0D8               	btfss	status,0,c
   826  007CB2  D7B6               	goto	l41
   827                           
   828                           ;hehe.c: 89: }
   829                           ;hehe.c: 91: for(long int i = 0; i < back_24; ++i){
   830  007CB4  0E00               	movlw	0
   831  007CB6  6E23               	movwf	led_send@i_216,c
   832  007CB8  0E00               	movlw	0
   833  007CBA  6E24               	movwf	led_send@i_216+1,c
   834  007CBC  0E00               	movlw	0
   835  007CBE  6E25               	movwf	led_send@i_216+2,c
   836  007CC0  0E00               	movlw	0
   837  007CC2  6E26               	movwf	led_send@i_216+3,c
   838  007CC4  D00E               	goto	l50
   839  007CC6                     l51:
   840                           
   841                           ;hehe.c: 92: PORTDbits.RD0 = 1;
   842  007CC6  8083               	bsf	3971,0,c	;volatile
   843                           
   844                           ;hehe.c: 93: PORTDbits.RD0 = 0;
   845  007CC8  9083               	bcf	3971,0,c	;volatile
   846                           
   847                           ;hehe.c: 94: __nop();
   848  007CCA  F000               	nop	
   849                           
   850                           ;hehe.c: 95: __nop();
   851  007CCC  F000               	nop	
   852                           
   853                           ;hehe.c: 96: __nop();
   854  007CCE  F000               	nop	
   855                           
   856                           ;hehe.c: 97: __nop();
   857  007CD0  F000               	nop	
   858                           
   859                           ;hehe.c: 98: __nop();
   860  007CD2  F000               	nop	
   861                           
   862                           ;hehe.c: 99: __nop();
   863  007CD4  F000               	nop	
   864  007CD6  0E01               	movlw	1
   865  007CD8  2623               	addwf	led_send@i_216,f,c
   866  007CDA  0E00               	movlw	0
   867  007CDC  2224               	addwfc	led_send@i_216+1,f,c
   868  007CDE  2225               	addwfc	led_send@i_216+2,f,c
   869  007CE0  2226               	addwfc	led_send@i_216+3,f,c
   870  007CE2                     l50:
   871  007CE2  5017               	movf	led_send@back_24,w,c
   872  007CE4  5C23               	subwf	led_send@i_216,w,c
   873  007CE6  5018               	movf	led_send@back_24+1,w,c
   874  007CE8  5824               	subwfb	led_send@i_216+1,w,c
   875  007CEA  5019               	movf	led_send@back_24+2,w,c
   876  007CEC  5825               	subwfb	led_send@i_216+2,w,c
   877  007CEE  5026               	movf	led_send@i_216+3,w,c
   878  007CF0  0A80               	xorlw	128
   879  007CF2  6E0F               	movwf	??_led_send& (0+255),c
   880  007CF4  501A               	movf	led_send@back_24+3,w,c
   881  007CF6  0A80               	xorlw	128
   882  007CF8  580F               	subwfb	??_led_send& (0+255),w,c
   883  007CFA  B0D8               	btfsc	status,0,c
   884  007CFC  0012               	return	
   885  007CFE  D7E3               	goto	l51
   886  007D00                     __end_of_led_send:
   887                           	opt stack 0
   888                           intcon	equ	0xFF2
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           status	equ	0xFD8
   892                           
   893 ;; *************** function ___lmul *****************
   894 ;; Defined at:
   895 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  multiplier      4    0[COMRAM] unsigned long 
   898 ;;  multiplicand    4    4[COMRAM] unsigned long 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  product         4    8[COMRAM] unsigned long 
   901 ;; Return value:  Size  Location     Type
   902 ;;                  4    0[COMRAM] unsigned long 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   910 ;;      Params:         8       0       0       0       0       0       0
   911 ;;      Locals:         4       0       0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0
   913 ;;      Totals:        12       0       0       0       0       0       0
   914 ;;Total ram usage:       12 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_led_send
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text2
   924  0078C6                     __ptext2:
   925                           	opt stack 0
   926  0078C6                     ___lmul:
   927                           	opt stack 29
   928                           
   929                           ;incstack = 0
   930  0078C6  0E00               	movlw	0
   931  0078C8  6E09               	movwf	___lmul@product,c
   932  0078CA  0E00               	movlw	0
   933  0078CC  6E0A               	movwf	___lmul@product+1,c
   934  0078CE  0E00               	movlw	0
   935  0078D0  6E0B               	movwf	___lmul@product+2,c
   936  0078D2  0E00               	movlw	0
   937  0078D4  6E0C               	movwf	___lmul@product+3,c
   938  0078D6  A001               	btfss	___lmul@multiplier,0,c
   939  0078D8  D008               	goto	l96
   940  0078DA  5005               	movf	___lmul@multiplicand,w,c
   941  0078DC  2609               	addwf	___lmul@product,f,c
   942  0078DE  5006               	movf	___lmul@multiplicand+1,w,c
   943  0078E0  220A               	addwfc	___lmul@product+1,f,c
   944  0078E2  5007               	movf	___lmul@multiplicand+2,w,c
   945  0078E4  220B               	addwfc	___lmul@product+2,f,c
   946  0078E6  5008               	movf	___lmul@multiplicand+3,w,c
   947  0078E8  220C               	addwfc	___lmul@product+3,f,c
   948  0078EA                     l96:
   949  0078EA  90D8               	bcf	status,0,c
   950  0078EC  3605               	rlcf	___lmul@multiplicand,f,c
   951  0078EE  3606               	rlcf	___lmul@multiplicand+1,f,c
   952  0078F0  3607               	rlcf	___lmul@multiplicand+2,f,c
   953  0078F2  3608               	rlcf	___lmul@multiplicand+3,f,c
   954  0078F4  90D8               	bcf	status,0,c
   955  0078F6  3204               	rrcf	___lmul@multiplier+3,f,c
   956  0078F8  3203               	rrcf	___lmul@multiplier+2,f,c
   957  0078FA  3202               	rrcf	___lmul@multiplier+1,f,c
   958  0078FC  3201               	rrcf	___lmul@multiplier,f,c
   959  0078FE  5001               	movf	___lmul@multiplier,w,c
   960  007900  1002               	iorwf	___lmul@multiplier+1,w,c
   961  007902  1003               	iorwf	___lmul@multiplier+2,w,c
   962  007904  1004               	iorwf	___lmul@multiplier+3,w,c
   963  007906  A4D8               	btfss	status,2,c
   964  007908  D7E6               	goto	l95
   965  00790A  C009  F001         	movff	___lmul@product,?___lmul
   966  00790E  C00A  F002         	movff	___lmul@product+1,?___lmul+1
   967  007912  C00B  F003         	movff	___lmul@product+2,?___lmul+2
   968  007916  C00C  F004         	movff	___lmul@product+3,?___lmul+3
   969  00791A  0012               	return		;funcret
   970  00791C                     __end_of___lmul:
   971                           	opt stack 0
   972                           intcon	equ	0xFF2
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           status	equ	0xFD8
   976                           
   977 ;; *************** function _init *****************
   978 ;; Defined at:
   979 ;;		line 111 in file "hehe.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   993 ;;      Params:         0       0       0       0       0       0       0
   994 ;;      Locals:         0       0       0       0       0       0       0
   995 ;;      Temps:          0       0       0       0       0       0       0
   996 ;;      Totals:         0       0       0       0       0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    1
  1000 ;; This function calls:
  1001 ;;		___wmul
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text3
  1008  007976                     __ptext3:
  1009                           	opt stack 0
  1010  007976                     _init:
  1011                           	opt stack 29
  1012                           
  1013                           ;hehe.c: 112: OSCCONbits.IRCF2 = 1;
  1014                           
  1015                           ;incstack = 0
  1016  007976  8CD3               	bsf	4051,6,c	;volatile
  1017                           
  1018                           ;hehe.c: 113: OSCCONbits.IRCF1 = 1;
  1019  007978  8AD3               	bsf	4051,5,c	;volatile
  1020                           
  1021                           ;hehe.c: 114: OSCCONbits.IRCF0 = 1;
  1022  00797A  88D3               	bsf	4051,4,c	;volatile
  1023                           
  1024                           ;hehe.c: 115: OSCTUNEbits.PLLEN=1;
  1025  00797C  8C9B               	bsf	3995,6,c	;volatile
  1026                           
  1027                           ;hehe.c: 117: ledlength=300;
  1028  00797E  0E2C               	movlw	44
  1029  007980  6E3C               	movwf	_ledlength,c
  1030  007982  0E01               	movlw	1
  1031  007984  6E3D               	movwf	_ledlength+1,c
  1032  007986  0E00               	movlw	0
  1033  007988  6E3E               	movwf	_ledlength+2,c
  1034  00798A  0E00               	movlw	0
  1035  00798C  6E3F               	movwf	_ledlength+3,c
  1036                           
  1037                           ;hehe.c: 118: lednum=1;
  1038  00798E  0E00               	movlw	0
  1039  007990  6E43               	movwf	_lednum+1,c
  1040  007992  0E01               	movlw	1
  1041  007994  6E42               	movwf	_lednum,c
  1042                           
  1043                           ;hehe.c: 119: lednum_24= lednum*24;
  1044  007996  C042  F001         	movff	_lednum,___wmul@multiplier
  1045  00799A  C043  F002         	movff	_lednum+1,___wmul@multiplier+1
  1046  00799E  0E00               	movlw	0
  1047  0079A0  6E04               	movwf	___wmul@multiplicand+1,c
  1048  0079A2  0E18               	movlw	24
  1049  0079A4  6E03               	movwf	___wmul@multiplicand,c
  1050  0079A6  EC50  F03C         	call	___wmul	;wreg free
  1051  0079AA  C001  F038         	movff	?___wmul,_lednum_24
  1052  0079AE  C002  F039         	movff	?___wmul+1,_lednum_24+1
  1053  0079B2  0E00               	movlw	0
  1054  0079B4  BE39               	btfsc	_lednum_24+1,7,c
  1055  0079B6  0EFF               	movlw	-1
  1056  0079B8  6E3A               	movwf	_lednum_24+2,c
  1057  0079BA  6E3B               	movwf	_lednum_24+3,c
  1058                           
  1059                           ;hehe.c: 120: ledmax=300;
  1060  0079BC  0E01               	movlw	1
  1061  0079BE  6E41               	movwf	_ledmax+1,c
  1062  0079C0  0E2C               	movlw	44
  1063  0079C2  6E40               	movwf	_ledmax,c
  1064                           
  1065                           ;hehe.c: 122: led.r = 1;
  1066  0079C4  0E01               	movlw	1
  1067  0079C6  6E4B               	movwf	_led,c
  1068                           
  1069                           ;hehe.c: 123: led.g = 1;
  1070  0079C8  0E01               	movlw	1
  1071  0079CA  6E4D               	movwf	_led+2,c
  1072                           
  1073                           ;hehe.c: 124: led.b = 100;
  1074  0079CC  0E64               	movlw	100
  1075  0079CE  6E4C               	movwf	_led+1,c
  1076                           
  1077                           ;hehe.c: 126: isFlow=0;
  1078  0079D0  0E00               	movlw	0
  1079  0079D2  6E4F               	movwf	_isFlow+1,c
  1080  0079D4  0E00               	movlw	0
  1081  0079D6  6E4E               	movwf	_isFlow,c
  1082                           
  1083                           ;hehe.c: 128: TRISDbits.RD0 = 0;
  1084  0079D8  9095               	bcf	3989,0,c	;volatile
  1085  0079DA  0012               	return		;funcret
  1086  0079DC                     __end_of_init:
  1087                           	opt stack 0
  1088                           intcon	equ	0xFF2
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           status	equ	0xFD8
  1092                           
  1093 ;; *************** function ___wmul *****************
  1094 ;; Defined at:
  1095 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  multiplier      2    0[COMRAM] unsigned int 
  1098 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  product         2    4[COMRAM] unsigned int 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2    0[COMRAM] unsigned int 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0, prodl, prodh
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1110 ;;      Params:         4       0       0       0       0       0       0
  1111 ;;      Locals:         2       0       0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0
  1113 ;;      Totals:         6       0       0       0       0       0       0
  1114 ;;Total ram usage:        6 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_led_send
  1120 ;;		_init
  1121 ;;		_main
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text4
  1126  0078A0                     __ptext4:
  1127                           	opt stack 0
  1128  0078A0                     ___wmul:
  1129                           	opt stack 29
  1130                           
  1131                           ;incstack = 0
  1132  0078A0  5001               	movf	___wmul@multiplier,w,c
  1133  0078A2  0203               	mulwf	___wmul@multiplicand,c
  1134  0078A4  CFF3 F005          	movff	prodl,___wmul@product
  1135  0078A8  CFF4 F006          	movff	prodh,___wmul@product+1
  1136  0078AC  5001               	movf	___wmul@multiplier,w,c
  1137  0078AE  0204               	mulwf	___wmul@multiplicand+1,c
  1138  0078B0  50F3               	movf	prodl,w,c
  1139  0078B2  2606               	addwf	___wmul@product+1,f,c
  1140  0078B4  5002               	movf	___wmul@multiplier+1,w,c
  1141  0078B6  0203               	mulwf	___wmul@multiplicand,c
  1142  0078B8  50F3               	movf	prodl,w,c
  1143  0078BA  2606               	addwf	___wmul@product+1,f,c
  1144  0078BC  C005  F001         	movff	___wmul@product,?___wmul
  1145  0078C0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1146  0078C4  0012               	return	
  1147  0078C6                     __end_of___wmul:
  1148                           	opt stack 0
  1149                           prodh	equ	0xFF4
  1150                           prodl	equ	0xFF3
  1151                           intcon	equ	0xFF2
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           status	equ	0xFD8
  1155                           
  1156 ;; *************** function _bitflip *****************
  1157 ;; Defined at:
  1158 ;;		line 104 in file "hehe.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  b               1    wreg     unsigned char 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  b               1    6[COMRAM] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  4    0[COMRAM] unsigned long 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1172 ;;      Params:         4       0       0       0       0       0       0
  1173 ;;      Locals:         1       0       0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0       0       0
  1175 ;;      Totals:         7       0       0       0       0       0       0
  1176 ;;Total ram usage:        7 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text5
  1186  00791C                     __ptext5:
  1187                           	opt stack 0
  1188  00791C                     _bitflip:
  1189                           	opt stack 30
  1190                           
  1191                           ;incstack = 0
  1192                           ;bitflip@b stored from wreg
  1193  00791C  6E07               	movwf	bitflip@b,c
  1194                           
  1195                           ;hehe.c: 105: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  1196  00791E  C007  F005         	movff	bitflip@b,??_bitflip
  1197  007922  0E0F               	movlw	15
  1198  007924  1605               	andwf	??_bitflip,f,c
  1199  007926  3A05               	swapf	??_bitflip,f,c
  1200  007928  0EF0               	movlw	240
  1201  00792A  1605               	andwf	??_bitflip,f,c
  1202  00792C  3807               	swapf	bitflip@b,w,c
  1203  00792E  0B0F               	andlw	15
  1204  007930  0B0F               	andlw	15
  1205  007932  1005               	iorwf	??_bitflip,w,c
  1206  007934  6E07               	movwf	bitflip@b,c
  1207                           
  1208                           ;hehe.c: 106: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  1209  007936  C007  F005         	movff	bitflip@b,??_bitflip
  1210  00793A  0E33               	movlw	51
  1211  00793C  1605               	andwf	??_bitflip,f,c
  1212  00793E  90D8               	bcf	status,0,c
  1213  007940  3605               	rlcf	??_bitflip,f,c
  1214  007942  90D8               	bcf	status,0,c
  1215  007944  3605               	rlcf	??_bitflip,f,c
  1216  007946  4007               	rrncf	bitflip@b,w,c
  1217  007948  42E8               	rrncf	wreg,f,c
  1218  00794A  0B3F               	andlw	63
  1219  00794C  0B33               	andlw	51
  1220  00794E  1005               	iorwf	??_bitflip,w,c
  1221  007950  6E07               	movwf	bitflip@b,c
  1222                           
  1223                           ;hehe.c: 107: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  1224  007952  C007  F005         	movff	bitflip@b,??_bitflip
  1225  007956  0E55               	movlw	85
  1226  007958  1605               	andwf	??_bitflip,f,c
  1227  00795A  90D8               	bcf	status,0,c
  1228  00795C  3405               	rlcf	??_bitflip,w,c
  1229  00795E  6E06               	movwf	(??_bitflip+1)& (0+255),c
  1230  007960  90D8               	bcf	status,0,c
  1231  007962  3007               	rrcf	bitflip@b,w,c
  1232  007964  0B55               	andlw	85
  1233  007966  1006               	iorwf	??_bitflip+1,w,c
  1234  007968  6E07               	movwf	bitflip@b,c
  1235                           
  1236                           ;hehe.c: 108: return (unsigned char)b;
  1237  00796A  5007               	movf	bitflip@b,w,c
  1238  00796C  6E01               	movwf	?_bitflip,c
  1239  00796E  6A02               	clrf	?_bitflip+1,c
  1240  007970  6A03               	clrf	?_bitflip+2,c
  1241  007972  6A04               	clrf	?_bitflip+3,c
  1242  007974  0012               	return	
  1243  007976                     __end_of_bitflip:
  1244                           	opt stack 0
  1245  0000                     prodh	equ	0xFF4
  1246                           prodl	equ	0xFF3
  1247                           intcon	equ	0xFF2
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           status	equ	0xFD8
  1251                           prodh	equ	0xFF4
  1252                           prodl	equ	0xFF3
  1253                           intcon	equ	0xFF2
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           status	equ	0xFD8
  1257                           
  1258                           	psect	rparam
  1259  0000                     prodh	equ	0xFF4
  1260                           prodl	equ	0xFF3
  1261                           intcon	equ	0xFF2
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     55      81
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_led_send
    _led_send->___lmul
    _init->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3258
                                             44 COMRAM    11    11      0
                             ___wmul
                            _bitflip
                               _init
                           _led_send
 ---------------------------------------------------------------------------------
 (1) _led_send                                            32    30      2    1471
                                             12 COMRAM    32    30      2
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     767
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _bitflip                                              7     3      4     157
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _bitflip
   _init
     ___wmul
   _led_send
     ___lmul
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     37      51       1       63.8%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      51      14        0.0%
DATA                 0      0      51      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Dec 17 00:27:03 2017

                     l40 7C98                       l41 7C20                       l50 7CE2  
                     l42 7C34                       l51 7CC6                       l44 7C42  
                     l37 7BF2                       l46 7C56                       l38 7BD6  
                     l70 7ACA                       l47 7C6C                       l71 7AE0  
                     l48 7C7C                       l72 7B16                       l64 7A06  
                     l73 7AF2                       l74 7B02                       l66 7A0A  
                     l75 7AFC                       l68 7A7A                       l69 7A92  
                     l95 78D6                       l79 7B26                       l96 78EA  
    ___wmul@multiplicand 0003                      l947 7AF2                      l949 7AFC  
                    _GIE 007F97                      u300 7AA0                      u320 7B10  
                    u330 7B24             __CFG_CPD$OFF 000000                      _led 004B  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _flag 0050                     _main 79DC                     _init 7976  
                   _tmp1 0046                     _tmp2 0045                     _tmp3 0044  
                   _temp 0047            __CFG_BOREN$ON 000000                     prodh 000FF4  
                   prodl 000FF3                     start 0002             ___param_bank 000000  
            led_send@buf 002B              led_send@val 0027                    ?_main 0001  
                  ?_init 0001            __CFG_PWRT$OFF 000000      ___lmul@multiplicand 0005  
        __end_of_bitflip 7976                    main@k 0032                    main@l 0034  
                  status 000FD8          led_send@back_24 0017          __initialization 788E  
           __end_of_main 7B2C             __end_of_init 79DC                   ??_main 002D  
                 ??_init 0007            __activetblptr 000000         __end_of_led_send 7D00  
                 ___lmul 78C6                   ___wmul 78A0                   _isFlow 004E  
                 _ledmax 0040                   _lednum 0042                   clear_0 7894  
              ??_bitflip 0005               __accesstop 0080  __end_of__initialization 789A  
          ___rparam_used 000001           __pcstackCOMRAM 0001            led_send@i_215 001F  
          led_send@i_216 0023            led_send@front 000D         led_send@front_24 0013  
             __pnvCOMRAM 0038                  ?___lmul 0001                  ?___wmul 0001  
         ___lmul@product 0009                ?_led_send 000D                  __Hparam 0000  
                __Lparam 0000          __size_of___lmul 0056          __size_of___wmul 0026  
                __pcinit 788E                  __ramtop 0600                  _bitflip 791C  
                __ptext0 79DC                  __ptext1 7B2C                  __ptext2 78C6  
                __ptext3 7976                  __ptext4 78A0                  __ptext5 791C  
   end_of_initialization 789A               ??_led_send 000F                  postinc0 000FEE  
              _PORTDbits 000F83                _TRISDbits 000F95           __end_of___lmul 791C  
         __end_of___wmul 78C6      start_initialization 788E         __CFG_OSC$INTIO67 000000  
               ??___lmul 0009                 ??___wmul 0005              __pbssCOMRAM 0047  
      __size_of_led_send 01D4                 ?_bitflip 0001                _ledlength 003C  
              _lednum_24 0038           ___wmul@product 0005        ___wmul@multiplier 0001  
              main@front 0036                led_send@i 001B        ___lmul@multiplier 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of_bitflip 005A  
               _led_send 7B2C            __size_of_main 0150            __size_of_init 0066  
               bitflip@b 0007              _OSCTUNEbits 000F9B               _OSCCONbits 000FD3  
